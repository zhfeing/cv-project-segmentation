%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9R1si2ax5_1ol22ea_1z8.tmp.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: zhfeing
%%CreationDate: 2020/5/25, 16:24:24
%%BoundingBox: 0 0 272 138
%%HiResBoundingBox: 0 0 271.8426 137.1969
%%CropBox: 0 0 271.8426 137.1969
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 843 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2020-05-25T14:42:38+08:00"
   xmp:CreateDate="2020-05-25T14:42:38+08:00"
   xmp:MetadataDate="2020-05-25T14:42:38+08:00"
   xmp:CreatorTool="Adobe Acrobat Pro DC 20.6.20042"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:d070a833-b433-487b-a9b7-816fc7477d05"
   xmpMM:InstanceID="uuid:9e2e2aa8-da2e-403c-9e32-fd12ce988a7e"
   pdf:Producer="Adobe Acrobat Pro DC 20.6.20042"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -137.197 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 137.197 li
271.843 137.197 li
271.843 0 li
cp
clp
.951614 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
33.6189 89.3819 mo
33.6189 91.0959 42.255 92.8429 50.924 92.8429 cv
120.21 92.8429 li
128.879 92.8429 137.548 94.5569 137.548 96.3039 cv
137.548 94.5569 146.184 92.8429 154.853 92.8429 cv
224.139 92.8429 li
232.809 92.8429 241.445 91.0959 241.445 89.3819 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
@
33.6189 96.3039 mo
33.6189 96.3039 li
cp
@
241.445 89.3489 mo
241.445 89.3489 li
cp
@
235.544 85.7231 mo
216.492 85.7231 li
216.492 47.6849 li
254.563 47.6849 li
254.563 85.7231 li
235.544 85.7231 li
cp
.748745 .42002 .102968 .000427253 cmyk
@
168.697 82.2621 mo
153.106 82.2621 li
153.106 51.1129 li
184.255 51.1129 li
184.255 82.2621 li
168.697 82.2621 li
cp
.648219 .252201 1 .0799878 cmyk
@
37.7062 75.2412 mo
29.0372 75.2412 li
29.0372 57.9361 li
46.3752 57.9361 li
46.3752 75.2412 li
37.7062 75.2412 li
cp
0 .49662 1 0 cmyk
@
104.553 78.8011 mo
92.4561 78.8011 li
92.4561 54.508 li
116.65 54.508 li
116.65 78.8011 li
104.553 78.8011 li
cp
.573236 .881407 .189609 .0343023 cmyk
@
94.1372 58.035 mo
92.3902 58.035 li
92.3902 54.574 li
95.8513 54.574 li
95.8513 58.035 li
94.1372 58.035 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
0 lw
94.1372 58.035 mo
92.3902 58.035 li
92.3902 54.574 li
95.8513 54.574 li
95.8513 58.035 li
94.1372 58.035 li
cp
.75021 .679683 .670222 .90164 cmyk
@
104.52 58.035 mo
102.806 58.035 li
102.806 54.574 li
106.267 54.574 li
106.267 58.035 li
104.52 58.035 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
104.52 58.035 mo
102.806 58.035 li
102.806 54.574 li
106.267 54.574 li
106.267 58.035 li
104.52 58.035 li
cp
.75021 .679683 .670222 .90164 cmyk
@
114.936 58.035 mo
113.189 58.035 li
113.189 54.574 li
116.65 54.574 li
116.65 58.035 li
114.936 58.035 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
114.936 58.035 mo
113.189 58.035 li
113.189 54.574 li
116.65 54.574 li
116.65 58.035 li
114.936 58.035 li
cp
.75021 .679683 .670222 .90164 cmyk
@
94.1372 68.418 mo
92.3902 68.418 li
92.3902 64.957 li
95.8513 64.957 li
95.8513 68.418 li
94.1372 68.418 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
94.1372 68.418 mo
92.3902 68.418 li
92.3902 64.957 li
95.8513 64.957 li
95.8513 68.418 li
94.1372 68.418 li
cp
.75021 .679683 .670222 .90164 cmyk
@
104.52 68.3521 mo
102.806 68.3521 li
102.806 64.8911 li
106.267 64.8911 li
106.267 68.3521 li
104.52 68.3521 li
cp
.0273747 .767636 .82916 .000579843 cmyk
ef
104.52 68.3521 mo
102.806 68.3521 li
102.806 64.8911 li
106.267 64.8911 li
106.267 68.3521 li
104.52 68.3521 li
cp
.75021 .679683 .670222 .90164 cmyk
@
114.936 68.418 mo
113.189 68.418 li
113.189 64.957 li
116.65 64.957 li
116.65 68.418 li
114.936 68.418 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
114.936 68.418 mo
113.189 68.418 li
113.189 64.957 li
116.65 64.957 li
116.65 68.418 li
114.936 68.418 li
cp
.75021 .679683 .670222 .90164 cmyk
@
94.1372 78.8011 mo
92.3902 78.8011 li
92.3902 75.34 li
95.8513 75.34 li
95.8513 78.8011 li
94.1372 78.8011 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
94.1372 78.8011 mo
92.3902 78.8011 li
92.3902 75.34 li
95.8513 75.34 li
95.8513 78.8011 li
94.1372 78.8011 li
cp
.75021 .679683 .670222 .90164 cmyk
@
104.52 78.8011 mo
102.806 78.8011 li
102.806 75.34 li
106.267 75.34 li
106.267 78.8011 li
104.52 78.8011 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
104.52 78.8011 mo
102.806 78.8011 li
102.806 75.34 li
106.267 75.34 li
106.267 78.8011 li
104.52 78.8011 li
cp
.75021 .679683 .670222 .90164 cmyk
@
114.936 78.8011 mo
113.189 78.8011 li
113.189 75.34 li
116.65 75.34 li
116.65 78.8011 li
114.936 78.8011 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
114.936 78.8011 mo
113.189 78.8011 li
113.189 75.34 li
116.65 75.34 li
116.65 78.8011 li
114.936 78.8011 li
cp
.75021 .679683 .670222 .90164 cmyk
@
30.7842 61.3971 mo
29.0372 61.3971 li
29.0372 57.9361 li
32.4982 57.9361 li
32.4982 61.3971 li
30.7842 61.3971 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
30.7842 61.3971 mo
29.0372 61.3971 li
29.0372 57.9361 li
32.4982 57.9361 li
32.4982 61.3971 li
30.7842 61.3971 li
cp
.75021 .679683 .670222 .90164 cmyk
@
37.7062 61.4301 mo
35.9922 61.4301 li
35.9922 57.9361 li
39.4532 57.9361 li
39.4532 61.4301 li
37.7062 61.4301 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
37.7062 61.4301 mo
35.9922 61.4301 li
35.9922 57.9361 li
39.4532 57.9361 li
39.4532 61.4301 li
37.7062 61.4301 li
cp
.75021 .679683 .670222 .90164 cmyk
@
44.6282 61.3971 mo
42.8812 61.3971 li
42.8812 57.9361 li
46.3752 57.9361 li
46.3752 61.3971 li
44.6282 61.3971 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
44.6282 61.3971 mo
42.8812 61.3971 li
42.8812 57.9361 li
46.3752 57.9361 li
46.3752 61.3971 li
44.6282 61.3971 li
cp
.75021 .679683 .670222 .90164 cmyk
@
30.7842 68.3191 mo
29.0372 68.3191 li
29.0372 64.8581 li
32.4982 64.8581 li
32.4982 68.3191 li
30.7842 68.3191 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
30.7842 68.3191 mo
29.0372 68.3191 li
29.0372 64.8581 li
32.4982 64.8581 li
32.4982 68.3191 li
30.7842 68.3191 li
cp
.75021 .679683 .670222 .90164 cmyk
@
37.7062 68.3191 mo
35.9922 68.3191 li
35.9922 64.8581 li
39.4532 64.8581 li
39.4532 68.3191 li
37.7062 68.3191 li
cp
.0273747 .767636 .82916 .000579843 cmyk
ef
37.7062 68.3191 mo
35.9922 68.3191 li
35.9922 64.8581 li
39.4532 64.8581 li
39.4532 68.3191 li
37.7062 68.3191 li
cp
.75021 .679683 .670222 .90164 cmyk
@
44.6282 68.3191 mo
42.8812 68.3191 li
42.8812 64.8581 li
46.3752 64.8581 li
46.3752 68.3191 li
44.6282 68.3191 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
44.6282 68.3191 mo
42.8812 68.3191 li
42.8812 64.8581 li
46.3752 64.8581 li
46.3752 68.3191 li
44.6282 68.3191 li
cp
.75021 .679683 .670222 .90164 cmyk
@
30.7842 75.2412 mo
29.0372 75.2412 li
29.0372 71.7801 li
32.4982 71.7801 li
32.4982 75.2412 li
30.7842 75.2412 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
30.7842 75.2412 mo
29.0372 75.2412 li
29.0372 71.7801 li
32.4982 71.7801 li
32.4982 75.2412 li
30.7842 75.2412 li
cp
.75021 .679683 .670222 .90164 cmyk
@
37.7062 75.2412 mo
35.9922 75.2412 li
35.9922 71.7801 li
39.4532 71.7801 li
39.4532 75.2412 li
37.7062 75.2412 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
37.7062 75.2412 mo
35.9922 75.2412 li
35.9922 71.7801 li
39.4532 71.7801 li
39.4532 75.2412 li
37.7062 75.2412 li
cp
.75021 .679683 .670222 .90164 cmyk
@
44.6282 75.2412 mo
42.8812 75.2412 li
42.8812 71.7801 li
46.3752 71.7801 li
46.3752 75.2412 li
44.6282 75.2412 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
44.6282 75.2412 mo
42.8812 75.2412 li
42.8812 71.7801 li
46.3752 71.7801 li
46.3752 75.2412 li
44.6282 75.2412 li
cp
.75021 .679683 .670222 .90164 cmyk
@
154.82 54.574 mo
153.106 54.574 li
153.106 51.1129 li
156.534 51.1129 li
156.534 54.574 li
154.82 54.574 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
154.82 54.574 mo
153.106 54.574 li
153.106 51.1129 li
156.534 51.1129 li
156.534 54.574 li
154.82 54.574 li
cp
.75021 .679683 .670222 .90164 cmyk
@
168.664 54.574 mo
166.917 54.574 li
166.917 51.1129 li
170.411 51.1129 li
170.411 54.574 li
168.664 54.574 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
168.664 54.574 mo
166.917 54.574 li
166.917 51.1129 li
170.411 51.1129 li
170.411 54.574 li
168.664 54.574 li
cp
.75021 .679683 .670222 .90164 cmyk
@
182.541 54.574 mo
180.794 54.574 li
180.794 51.1129 li
184.255 51.1129 li
184.255 54.574 li
182.541 54.574 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
182.541 54.574 mo
180.794 54.574 li
180.794 51.1129 li
184.255 51.1129 li
184.255 54.574 li
182.541 54.574 li
cp
.75021 .679683 .670222 .90164 cmyk
@
154.82 68.418 mo
153.106 68.418 li
153.106 64.957 li
156.534 64.957 li
156.534 68.418 li
154.82 68.418 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
154.82 68.418 mo
153.106 68.418 li
153.106 64.957 li
156.534 64.957 li
156.534 68.418 li
154.82 68.418 li
cp
.75021 .679683 .670222 .90164 cmyk
@
168.631 68.3191 mo
166.884 68.3191 li
166.884 64.8251 li
170.345 64.8251 li
170.345 68.3191 li
168.631 68.3191 li
cp
.0273747 .767636 .82916 .000579843 cmyk
ef
168.631 68.3191 mo
166.884 68.3191 li
166.884 64.8251 li
170.345 64.8251 li
170.345 68.3191 li
168.631 68.3191 li
cp
.75021 .679683 .670222 .90164 cmyk
@
182.541 68.3191 mo
180.794 68.3191 li
180.794 64.8251 li
184.255 64.8251 li
184.255 68.3191 li
182.541 68.3191 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
182.541 68.3191 mo
180.794 68.3191 li
180.794 64.8251 li
184.255 64.8251 li
184.255 68.3191 li
182.541 68.3191 li
cp
.75021 .679683 .670222 .90164 cmyk
@
154.82 82.2621 mo
153.106 82.2621 li
153.106 78.8011 li
156.534 78.8011 li
156.534 82.2621 li
154.82 82.2621 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
154.82 82.2621 mo
153.106 82.2621 li
153.106 78.8011 li
156.534 78.8011 li
156.534 82.2621 li
154.82 82.2621 li
cp
.75021 .679683 .670222 .90164 cmyk
@
168.664 82.2621 mo
166.917 82.2621 li
166.917 78.8011 li
170.411 78.8011 li
170.411 82.2621 li
168.664 82.2621 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
168.664 82.2621 mo
166.917 82.2621 li
166.917 78.8011 li
170.411 78.8011 li
170.411 82.2621 li
168.664 82.2621 li
cp
.75021 .679683 .670222 .90164 cmyk
@
182.541 82.2621 mo
180.794 82.2621 li
180.794 78.8011 li
184.255 78.8011 li
184.255 82.2621 li
182.541 82.2621 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
182.541 82.2621 mo
180.794 82.2621 li
180.794 78.8011 li
184.255 78.8011 li
184.255 82.2621 li
182.541 82.2621 li
cp
.75021 .679683 .670222 .90164 cmyk
@
218.206 51.1129 mo
216.459 51.1129 li
216.459 47.6519 li
219.92 47.6519 li
219.92 51.1129 li
218.206 51.1129 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
218.206 51.1129 mo
216.459 51.1129 li
216.459 47.6519 li
219.92 47.6519 li
219.92 51.1129 li
218.206 51.1129 li
cp
.75021 .679683 .670222 .90164 cmyk
@
235.511 51.1129 mo
233.797 51.1129 li
233.797 47.6519 li
237.258 47.6519 li
237.258 51.1129 li
235.511 51.1129 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
235.511 51.1129 mo
233.797 51.1129 li
233.797 47.6519 li
237.258 47.6519 li
237.258 51.1129 li
235.511 51.1129 li
cp
.75021 .679683 .670222 .90164 cmyk
@
252.849 51.1129 mo
251.102 51.1129 li
251.102 47.6519 li
254.563 47.6519 li
254.563 51.1129 li
252.849 51.1129 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
252.849 51.1129 mo
251.102 51.1129 li
251.102 47.6519 li
254.563 47.6519 li
254.563 51.1129 li
252.849 51.1129 li
cp
.75021 .679683 .670222 .90164 cmyk
@
218.206 68.418 mo
216.459 68.418 li
216.459 64.957 li
219.92 64.957 li
219.92 68.418 li
218.206 68.418 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
218.206 68.418 mo
216.459 68.418 li
216.459 64.957 li
219.92 64.957 li
219.92 68.418 li
218.206 68.418 li
cp
.75021 .679683 .670222 .90164 cmyk
@
235.445 68.2862 mo
233.731 68.2862 li
233.731 64.8251 li
237.16 64.8251 li
237.16 68.2862 li
235.445 68.2862 li
cp
.0273747 .767636 .82916 .000579843 cmyk
ef
235.445 68.2862 mo
233.731 68.2862 li
233.731 64.8251 li
237.16 64.8251 li
237.16 68.2862 li
235.445 68.2862 li
cp
.75021 .679683 .670222 .90164 cmyk
@
252.849 68.2862 mo
251.102 68.2862 li
251.102 64.8251 li
254.563 64.8251 li
254.563 68.2862 li
252.849 68.2862 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
252.849 68.2862 mo
251.102 68.2862 li
251.102 64.8251 li
254.563 64.8251 li
254.563 68.2862 li
252.849 68.2862 li
cp
.75021 .679683 .670222 .90164 cmyk
@
218.206 85.7231 mo
216.459 85.7231 li
216.459 82.2621 li
219.92 82.2621 li
219.92 85.7231 li
218.206 85.7231 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
218.206 85.7231 mo
216.459 85.7231 li
216.459 82.2621 li
219.92 82.2621 li
219.92 85.7231 li
218.206 85.7231 li
cp
.75021 .679683 .670222 .90164 cmyk
@
235.511 85.7231 mo
233.797 85.7231 li
233.797 82.2621 li
237.258 82.2621 li
237.258 85.7231 li
235.511 85.7231 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
235.511 85.7231 mo
233.797 85.7231 li
233.797 82.2621 li
237.258 82.2621 li
237.258 85.7231 li
235.511 85.7231 li
cp
.75021 .679683 .670222 .90164 cmyk
@
252.849 85.7231 mo
251.102 85.7231 li
251.102 82.2621 li
254.563 82.2621 li
254.563 85.7231 li
252.849 85.7231 li
cp
.172488 .0217594 .0107118 0 cmyk
ef
252.849 85.7231 mo
251.102 85.7231 li
251.102 82.2621 li
254.563 82.2621 li
254.563 85.7231 li
252.849 85.7231 li
cp
.75021 .679683 .670222 .90164 cmyk
@
.951614 lw
39.3543 55.2332 mo
42.255 55.2332 li
0 .993988 1 0 cmyk
@
35.5966 55.2332 mo
39.5191 56.5187 li
39.5191 53.9147 li
35.5966 55.2332 li
cp
ef
46.0126 55.2332 mo
42.0902 53.9147 li
42.0902 56.5187 li
46.0126 55.2332 li
cp
ef
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: HAAAAA+LiberationSans Initial
ct_T42Dict begin
0 -0.207 0.766 0.723
 256 array 0 1 255 {1 index exch /.notdef put} for  /HAAAAA+LiberationSans
Type42DictBegin
[<00010000000b000b000b000b63767420ef479a22000000bc000002166670
676d2833dbee000002d400000705676c7966b4695e95000016200000210c
686561640e35e033000009dc00000036686865616cfe820700000a140000
0024686d7478720d8b6b00000a38000000746c6f6361546b525e00000aac
0000003c6d61787045062c0300000ae8000000206e616d6535f202e40000
0b080000084070726570365ec83e00001348000002d56764697200000000
000000000000000005cc05cc007d05810015007905810015000000000000
0000000000000000043a001400770000ffec00000000ffec00000000ffec
0000fe570000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000008000000000000b4
00bd00af00a00000000000000000000000000088007e000000ac00000000
000000000000000000bf00c300ab00000000009b008d0000000000000000
00000000000000000000000000000000000000b900aa0000000000000094
00990087000000000000000000000000000000000000000000000000006a
0083008d00a400b4000000000000000000000060006a0079009800ac00b8
00a700000122013300c3006b00000000000000db00c90000000000000000
000000000000000000000000000001e101c9009200a8006b009200b7006b
009b0000027b02f200920252006e02d703810082008900a0009f0169008f
0000016000a4015b005e0082000000000000005e0065006f000000000000
0000000000000000008a009000a5007a0080000000000000000000000581
fff3000dfca700830089008f0096006900710000000000000000000000a8
01f900000000031f00a700ae00b500000000008100000000000000000748
036a02b60202fd930000009100670091006101d90000028d034100440511
01a90000404559585554535251504f4e4d4c4b4a49484746454443424140
3f3e3d3c3b3a393837363531302f2e2d2c28272625242322211f18141110
0f0e0d0b0a090807060504030201002c4523466020b02660b00426234848
2d2c452346236120b02661b004262348482d2c45234660b0206120b04660
b004262348482d2c4523462361b0206020b02661b02061b004262348482d
2c45234660b0406120b06660b004262348482d2c4523462361b0406020b0
2661b04061b004262348482d2c0110203c003c2d2c20452320b0cd442320
b8015a51582320b08d44235920b0ed51582320b04d44235920b004265158
2320b00d44235921212d2c20204518684420b001602045b04676688a4560
442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0282370b1
01283e01b0282370b10228453ab10200080d2d2c2045b00325456164b050
515845441b2121592d2c49b00e23442d2c2045b0004360442d2c01b00643
b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c6423
64615c58b00361592d2c8a03458a8a87b0112bb0292344b0297ae4182d2c
4565b02c234445b02b23442d2c4b525845441b2121592d2c4b515845441b
2121592d2c01b005251023208af500b0016023edec2d2c01b00525102320
8af500b0016123edec2d2c01b0062510f500edec2d2c462346608a8a4623
20468a608a61b8ff8062232010238ab10c0c8a70456020b0005058b00161
b8ffba8b1bb0468c59b0106068013a2d2c2045b0032546524bb013515b58
b0022546206861b00325b003253f2321381b2111592d2c2045b003254650
58b0022546206861b00325b003253f2321381b2111592d2c00b00743b006
430b2d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000
621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200
802f2b59b002602d2c0c6423648bb84000626023212d2c4b53588ab00425
4964234569b0408b61b08062b020616ab00e23442310b00ef61b21238a12
1120392f592d2c4b535820b0032549646920b00526b0062549642361b080
62b020616ab00e2344b0042610b00ef68a10b00e2344b00ef6b00e2344b0
0eed1b8ab00426111220392320392f2f592d2c4523456023456023456023
766818b08062202d2cb0482b2d2c2045b0005458b040442045b04061441b
2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f2370b014
23421b2121592d2c4b515820b0032545695358441b2121591b2121592d2c
45b01443b0006063b0016069442d2cb02f45442d2c452320458a60442d2c
45234560442d2c4b235158b90033ffe0b134201bb3330034005944442d2c
b0164358b00326458a586466b01f601b64b020606620581b21b04059b001
615923586559b02923442310b029e01b2121212121592d2cb0024354584b
53234b515a58381b2121591b21212121592d2cb0164358b004254564b020
606620581b21b04059b0016123581b6559b0292344b00525b00825082058
021b0359b0042510b005252046b0042523423cb00425b0072508b0072510
b006252046b00425b0016023423c2058011b0059b0042510b00525b029e0
b02920456544b0072510b00625b029e0b00525b00825082058021b0359b0
0525b003254348b00425b0072508b00625b00325b0016043481b21592121
21212121212d2c02b00425202046b004252342b0052508b0032545482121
21212d2c02b0032520b0042508b0022543482121212d2c452320451820b0
0050205823652359236820b040505821b04059235865598a60442d2c4b53
234b515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c
4b53234b515a58381b2121592d2cb000214b5458381b2121592d2cb00243
5458b0462b1b21212121592d2cb002435458b0472b1b212121592d2cb002
435458b0482b1b21212121592d2cb002435458b0492b1b212121592d2c20
8a08234b538a4b515a5823381b2121592d2c00b0022549b000535820b040
38111b21592d2c014623466023466123201020468a61b8ff80628ab14040
8a704560683a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a59
2d2cb012004b014b54422d2cb1020042b123018851b1400188535a58b910
000020885458b202010243604259b12401885158b920000040885458b202
0202436042b12401885458b2022002436042004b014b5258b20208024360
42591bb940000080885458b202040243604259b94000008063b801008854
58b202080243604259b94000010063b80200885458b202100243604259b9
4000020063b80400885458b202400243604259595959592d2c451868234b
51582320452064b04050587c59688a6059442d2cb00016b00225b0022501
b001233e00b002233eb10102060cb00a236542b00b234201b001233f00b0
02233fb10102060cb006236542b0072342b00116012d2c7a8a104523f518
2d00000000010000000111eba47423675f0f3cf5001f080000000000ce8a
dd0100000000000000000000fe57062305cc000000080002000000000000
00010000073efe4e00430000000000000000000100000000000000000000
00000000001d02ec004402aa0088047300570239001f0473005702390000
04ac0064047300680473009c04730067047300590473002f055600040473
005604730085040000390556005d0473008401c7008901c7008a055600a8
0400000506aa0088047300560473008804730056023900bd04e300a806aa
00a80000002c007a0126018801f801f8023002da032003aa047a04e00592
06020676072407ee088a08d8091c09800b1a0ccc0d560dc40e920edc0f26
108600010000001d005200030000000000020010002f005a0000039e05c0
000300020000001c01560001000000000000006000000001000000000001
000f006000010000000000020007006f0001000000000003001a00760001
000000000004000f00900001000000000005000e009f0001000000000006
000e00ad0001000000000007007a00bb0001000000000008001401350001
000000000009000e0149000100000000000b001c0157000100000000000c
002e0173000100000000000d006f01a1000100000000000e003e02100003
00010409000000c0024e0003000104090001001e030e0003000104090002
000e032c00030001040900030034033a0003000104090004001e036e0003
000104090005001c038c0003000104090006001c03a80003000104090007
00f403c40003000104090008002804b80003000104090009001c04e00003
00010409000b003804fc000300010409000c005c0534000300010409000d
00de0590000300010409000e007c066e436f707972696768742028632920
3230303720526564204861742c20496e632e20416c6c2072696768747320
72657365727665642e204c494245524154494f4e20697320612074726164
656d61726b206f6620526564204861742c20496e632e4c69626572617469
6f6e2053616e73526567756c6172417363656e646572202d204c69626572
6174696f6e2053616e734c696265726174696f6e2053616e735665727369
6f6e20312e30372e334c696265726174696f6e53616e734c696265726174
696f6e20697320612074726164656d61726b206f6620526564204861742c
20496e632e207265676973746572656420696e20552e532e20506174656e
7420616e642054726164656d61726b204f666669636520616e6420636572
7461696e206f74686572206a7572697364696374696f6e732e417363656e
64657220436f72706f726174696f6e5374657665204d61747465736f6e68
7474703a2f2f7777772e617363656e646572636f72702e636f6d2f687474
703a2f2f7777772e617363656e646572636f72702e636f6d2f7479706564
657369676e6572732e68746d6c4c6963656e73656420756e646572207468
65204c696265726174696f6e20466f6e7473206c6963656e73652c207365
652068747470733a2f2f6665646f726170726f6a6563742e6f72672f7769
6b692f4c6963656e73696e672f4c696265726174696f6e466f6e744c6963
656e736568747470733a2f2f6665646f726170726f6a6563742e6f72672f
77696b692f4c6963656e73696e672f4c696265726174696f6e466f6e744c
6963656e73650043006f0070007900720069006700680074002000280063
00290020003200300030003700200052006500640020004800610074002c
00200049006e0063002e00200041006c006c002000720069006700680074
0073002000720065007300650072007600650064002e0020004c00490042
00450052004100540049004f004e00200069007300200061002000740072
006100640065006d00610072006b0020006f006600200052006500640020
004800610074002c00200049006e0063002e004c00690062006500720061
00740069006f006e002000530061006e00730052006500670075006c0061
00720041007300630065006e0064006500720020002d0020004c00690062
00650072006100740069006f006e002000530061006e0073004c00690062
00650072006100740069006f006e002000530061006e0073005600650072
00730069006f006e00200031002e00300037002e0033004c006900620065
0072006100740069006f006e00530061006e0073004c0069006200650072
006100740069006f006e0020006900730020006100200074007200610064
0065006d00610072006b0020006f00660020005200650064002000480061
0074002c00200049006e0063002e00200072006500670069007300740065
00720065006400200069006e00200055002e0053002e0020005000610074
0065006e007400200061006e0064002000540072006100640065006d0061
0072006b0020004f0066006600690063006500200061006e006400200063
00650072007400610069006e0020006f00740068006500720020006a0075
00720069007300640069006300740069006f006e0073002e004100730063
0065006e00640065007200200043006f00720070006f0072006100740069
006f006e005300740065007600650020004d00610074007400650073006f
006e0068007400740070003a002f002f007700770077002e006100730063
0065006e0064006500720063006f00720070002e0063006f006d002f0068
007400740070003a002f002f007700770077002e0061007300630065006e
0064006500720063006f00720070002e0063006f006d002f007400790070
006500640065007300690067006e006500720073002e00680074006d006c
004c006900630065006e00730065006400200075006e0064006500720020
0074006800650020004c0069006200650072006100740069006f006e0020
0046006f006e007400730020006c006900630065006e00730065002c0020
007300650065002000680074007400700073003a002f002f006600650064
006f0072006100700072006f006a006500630074002e006f00720067002f
00770069006b0069002f004c006900630065006e00730069006e0067002f
004c0069006200650072006100740069006f006e0046006f006e0074004c
006900630065006e0073006500680074007400700073003a002f002f0066
00650064006f0072006100700072006f006a006500630074002e006f0072
0067002f00770069006b0069002f004c006900630065006e00730069006e
0067002f004c0069006200650072006100740069006f006e0046006f006e
0074004c006900630065006e00730065b10940be01070001001f01070001
009f0104408e01c0fd01affd0100fd010a4ffb0120fb01f550281ff24628
1ff1462a1ff0462b1f5fef7fef020fef4fef5fef8fefafef050be5e41e1f
e3e2461f0fe20140e246161fe1e0461fcfe0dfe0efe00340e0333646e046
181fdd3ddf55de3d0355df010355dc03ff1f0fd51fd5020fd51fd50240ca
181b46cfc201bdc03c1fc150261fbcbe281fffb90150b870b880b803b8ff
c040ffb81232461fb73fb74fb76fb77fb79fb7afb70770b2a0b2b0b2030f
b20190b501b0b5010fb501080fb33fb3efb30380b090b002b0b0c0b0d0b0
032faf3faf02a0adb0ad02c0add0ad022fac3fac029fab01c0aad0aa024f
a98fa9022fa96fa9bfa9ffa9049c9b241f509b016f9601bf960196461d1f
9594171f7f948f94ff94033091409102809101708f808f02908f01c08fd0
8f024f8c5f8c6f8c038646ff1f9f85018483311f74733f1f7350261f6f6e
3c1f6e46351f1a01185519331855073303550603ff1f6050261f5f50261f
5c46311f5b5a481f5a46311f1332125505010355043203556f03010f033f
0302ef51ff510240513538464051252846cf405450014946201f4846351f
4746351faf4601df46ef46028046011632155511010f5510320f55020100
550100011f1f0f3f0f5f0f7f0f040f0f2f0f4f0f6f0f8f0fdf0fff0f073f
0f7f0fef0f036f00018016010501b80190b154532b2b4bb807ff524bb007
505bb00188b02553b00188b040515ab00688b000555a5b58b101018e5985
8d8d00421d4bb0325358b0601d594bb0645358b0401d594bb0805358b010
1db116004259747374752b2b2b2b2b017374752b2b2b00742b2b7373752b
2b2b012b2b2b002b2b2b2b2b2b012b2b002b2b012b732b00747374757374
732b012b747500732b73740173737400737474737473015e737374737300
732b7373012b002b012b00732b74752b2b2b2b012b2b742b2b5e732b002b
5e7374012b2b2b002b73735e73737301737373185e00000000>
[8461 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 88 1 <0001008800000288044e001f003e402810153015021515210c1f46c00001
000010003000e000f0000508001928131648190c1210070f0015003f3f3f
33cd2b012f5e5d71ed3211332f5d31303311342e0227331e0315333e0333
321617152e0123220e0215118e01020201aa0103030104132b3a50391628
0b12301e3e57371a033e2247423a17173b3e39143e5b3b1d0703a5050538
638951fdcc00>HAAAAA+LiberationSans AddT42Char 
1 244 2 <00020057ffec0473044e0032004100a14032793d893d02790c890c020228
090d480a051a05022b18091148051c151c0225251e46402e096f387f388f
3803384380144715b8ffc04014151c4815153f471f0301033043c04302a0
430143b8ffc040201e234821512816395109091a335f14012f148f140214
140f501a102e33500016003fed323fed332f5d711112392fed3fed012b5d
712f5ded332f2bed1a10dc5d32321aed322f31305d2b5d2b005d5d052226
35343e023f0135342e0223220e0207273e03333216151114163332363715
0e0123222e0227230e0327323e023d01070e03151416019ea3a45183a857
f31c3a573b34543e2606bc0a38679b6eccce2a3b0f1e0e22432633492e18
03061d455c75235681552ac542775a355f14ac966b894e1e02043b435e3a
1b0f27433311406b4e2bbbb1fe2e505104037008081b37513634543b2087
3f62743559040111325a49586000>HAAAAA+LiberationSans AddT42Char 
1 588 3 <0001001ffff0022a052c0016007b4057280e01690e790e890e03280d0169
0d790d890d038b04010420090d486c047c049c04ac04040420090c486f16
7f1602160c0d1603104609088f050100051005200540050407058018010f
06500c3f0a010a090f13500316003fed3fcd5d33ed32015d2f5e5d713333
ed17322f5d3130002b5d012b5d5d715d71250e0123223511233533373315
33152311141633323637022a295538d87d843578c8c8333f1a311d080b0d
f502d283f2f283fd554e3f0806000000>HAAAAA+LiberationSans AddT42Char 
1 784 4 <00020057ffec0418044e001c0025006b402e5a236a23025a1e6a1e025503
650302084909091b47401f1d01901d011d27802500471f1101113027c027
d0270327b8ffc040131e234808080500502525052050161005500e16003f
ed3fed12392fed11392f012b712f5ded321a10dc5d711aed322fed31305d
005d5d01141e0233323637170e0323220211343e0233321e021d01272e01
23220e0207011423497250758d199e113d66996cf0fb4c84b06488b76f2f
ba0f90872d63543a0401f7558f67395e482d2d5b492f011e011a98d3843b
589bd27a188aab9d1d4a7f620000>HAAAAA+LiberationSans AddT42Char 

1 0 5 <> HAAAAA+LiberationSans AddT42Char 
1 1008 6 <000200640158044703ec0003000700464031074002600202000220027002
d002040204df00012000010004ad1f052f055f056f05df05050500ad5001
d001020f010101002f5d5dedde5ded012f5d5d332f5d7133313013352115
013521156403e3fc1d03e303589494fe009494000000>HAAAAA+LiberationSans AddT42Char 
1 1120 7 <00020068ffec041905960024003800af40308c15017a168a160259076907
025a036a037a030354026402025423642374230354226422742203351e45
1e0285320132b8fff0402d0a0d48841a01251a351a451a751a04161a0115
6f1414006e402f259f2502902501253a802f1d6e100a200a020ab8ffc040
181e26480a1d2a7520203418731915991502150f0734730519003fed3f33
5ded12392fed32012f2b5ded321a10dc5d711aed322fed31305d5d5d2b5d
005d5d015d5d005d5d5d5d01140e0223222e01023534123e0133321e0217
072e0123220e02153e0133321e0207342e0223220e0215141e0233323e02
04193b73aa6f7bb87a3d4582bb76487e674e17ac1c7b514a78542d31b273
609c6f3db724486a4631645133284b6a424167482601cd6ab17f475eb101
01a4bc011cbe601e436e501f5b51468bd28c5b5f3e75a7704976532d1d41
6a4c4e87643a2d557a00>HAAAAA+LiberationSans AddT42Char 
1 0 0 <0002004400000264055500030007002eb101002f3cb2070408ed32b10605
dc3cb2030208ed3200b103002f3cb2050408ed32b2070609fc3cb2010208
ed323311211125211121440220fe240198fe680555faab4404cd0000>HAAAAA+LiberationSans AddT42Char 
HAAAAA+LiberationSans /CharStrings get begin
/g1 1 def
/g2 2 def
/g3 3 def
/g4 4 def
/g5 5 def
/g6 6 def
/g7 7 def
end
HAAAAA+LiberationSans /Encoding get
dup 1 /g1 put
dup 2 /g2 put
dup 3 /g3 put
dup 4 /g4 put
dup 5 /g5 put
dup 6 /g6 put
dup 7 /g7 put
pop
end
%ADOEndSubsetFont
/XJIXJP+LiberationSans /HAAAAA+LiberationSans findfont ct_VMDictPut
/XJIXJP+LiberationSans*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
248{/.notdef}rp]
XJIXJP+LiberationSans nf
XJIXJP+LiberationSans*1 [6.592 0 0 -6.592 0 0 ]msf
28.9056 51.5306 mo
(\001\002\003\004\005\006\005\007)
[2.20168 3.68494 1.81274 3.65855 1.83913 3.84969 1.83911 0 ]xsh
106.531 51.8051 mo
112.926 51.8051 li
0 .993988 1 0 cmyk
@
102.806 51.8051 mo
106.696 53.0907 li
106.696 50.4867 li
102.806 51.8051 li
cp
ef
116.65 51.8051 mo
112.761 50.4867 li
112.761 53.0907 li
116.65 51.8051 li
cp
ef
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: HAAAAA+LiberationSans AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XJIXJP+LiberationSans gcheck setglobal} if
1 1460 8 <0001009c0000040f0581000a005e402020098009020909086e0290040104
2f018f010201010406030002100202070205b8fff0401a10164844055405
64050305040310101648040306060801740018003fed323f33332b2f335d
2b012f5e5d17332f5d2f5d10ed322f5d313033352111053525331121159c
0167fec2014da6015799043ce3aae5fb18990000>XJIXJP+LiberationSans AddT42Char 
1 1600 9 <000100670000040c0596002800a1404d750401751a851a027a108a100265
2501562501292159216921036923011c2301191501751b851b02061b0127
1d6e400840262a484008018f0801082a80126e1374268426021326100020
000200b8ffc0401f1e26480008268e12015c126c127c12030a121a120212
0d7318070126740018003fed393fed335d5d5d1239012f2b5d33335d2fed
1a10dc5d712b1aed3231305d5d005d5d5d5d015d5d005d5d5d33353e0535
342e0223220e0207273e0333321e0215140e06072115673393a29f804f24
445f3a365f4a2f07b8094274a36b69a4713c3355707a7c6d561802df7f75
b3917c7c88563c5b3e1f1e3c593b114c86653a3262905e4780746c676566
693999000000>XJIXJP+LiberationSans AddT42Char 
XJIXJP+LiberationSans /CharStrings get begin
/g8 8 def
/g9 9 def
end
XJIXJP+LiberationSans /Encoding get
dup 8 /g8 put
dup 9 /g9 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XJIXJP+LiberationSans*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 246{/.notdef}rp]
XJIXJP+LiberationSans nf
XJIXJP+LiberationSans*1 [6.592 0 0 -6.592 0 0 ]msf
96.313 48.0036 mo
(\001\002\003\004\005\006\005\010\011)
[2.23465 3.65854 1.83914 3.65854 1.81274 3.88266 1.81274 3.68494 0 ]xsh
170.28 48.3112 mo
180.135 48.3112 li
0 .993988 1 0 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: HAAAAA+LiberationSans AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XJIXJP+LiberationSans gcheck setglobal} if
1 1876 10 <00030059ffec041a05960029003d005100bf408475288528027521852102
751d851d02751c851c0275188518027a178a17027a138a13027a0c017a08
8a08027a078a07027a038a030275028502025545654502554b654b025a41
6a4102346e152a6e1f0f241f4f1501151f151f0a006e400f3e1f3e021f3e
2f3e9f3e03903e013e5380486ed00a010a240f437539394d2f751a074d75
0519003fed3fed12392fed3939012f71ed1a10dc5d71721aed1139392f2f
7112393910ed10ed31305d5d5d5d005d5d015d5d5d5d005d5d015d5d5d01
140e0223222e0235343e0237352e0335343e0233321e0215140e0207151e
0303342e0223220e0215141e0233323e0213342e0223220e0215141e0233
323e02041a3975b67c7cb577392f4f65363b5d3f213970a66d73a96f3621
3f5d3d3d684c2cde1b3e644947623f1c163a665055673711231c4473564f
6f4520204672515270441d01895a976e3e3e6d97594d78573509040e3e57
6a3b4a8363393a63844a3a6a573d0c040a355778024c35583f23233f5835
2a58482e2e4858fda3335f492d2d4a6134416b4d2a2a4d6d0000>XJIXJP+LiberationSans AddT42Char 
XJIXJP+LiberationSans /CharStrings get begin
/g10 10 def
end
XJIXJP+LiberationSans /Encoding get
dup 10 /g10 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XJIXJP+LiberationSans*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 245{/.notdef}rp]
XJIXJP+LiberationSans nf
XJIXJP+LiberationSans*1 [6.592 0 0 -6.592 0 0 ]msf
161.874 44.6415 mo
(\001\002\003\004\005\006\005\010\012)
[2.20169 3.65854 1.83914 3.65854 1.81274 3.88266 1.81274 3.68494 0 ]xsh
228.6 451.989 mo
216.8 447.989 li
216.8 455.889 li
228.6 451.989 li
cp
0 .993988 1 0 cmyk
ef
176 451.989 mo
187.9 455.889 li
187.9 447.989 li
176 451.989 li
cp
ef
237.489 44.4876 mo
250.773 44.4876 li
@
233.731 44.4876 mo
237.654 45.8061 li
237.654 43.2021 li
233.731 44.4876 li
cp
ef
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: HAAAAA+LiberationSans AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XJIXJP+LiberationSans gcheck setglobal} if
1 2292 11 <0002002f000004370581000a0017007540509a0f01990601880601851095
1002761001181601761686169616031605400c1548055b0a6b0a7b0a030a
08016f17061f02017002e002020002100230025002e00205080200047308
1616010b06060118003f3f3312392f33ed32012f5e5d71723333ed32325d
2f2b335d7131305d5d5d5d005d0111231121350133113315010e0307010e
0307210371aafd680285bdc6fe900210141508fe97051314140601f2013f
fec1013f8c03b6fc4c8e0377051d24250cfdec081a1b1a07>XJIXJP+LiberationSans AddT42Char 
XJIXJP+LiberationSans /CharStrings get begin
/g11 11 def
end
XJIXJP+LiberationSans /Encoding get
dup 11 /g11 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XJIXJP+LiberationSans*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 244{/.notdef}rp]
XJIXJP+LiberationSans nf
XJIXJP+LiberationSans*1 [6.592 0 0 -6.592 0 0 ]msf
229.974 40.5872 mo
(\001\002\003\004\005\006\005\011\013)
[2.20169 3.68491 1.81277 3.68491 1.81274 3.88266 1.81274 3.65857 0 ]xsh
443 440.389 mo
431.1 436.489 li
431.1 444.389 li
443 440.389 li
cp
0 .993988 1 0 cmyk
ef
0 lw
136.79 88.0304 mo
8.6337 88.0304 li
8.6337 3.38393 li
264.947 3.38393 li
264.947 88.0304 li
136.79 88.0304 li
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: HAAAAA+LiberationSans AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XJIXJP+LiberationSans gcheck setglobal} if
1 2496 12 <0002000400000552058100070014011240ce660276028602036613761386
1303690179018901036914791489140373068306026506017c058c05026a
05017a008a0002390059006900037503850302360356036603035a040148
040155070147070113020301140015062506350603060601e606f606021a
052a053a0503090501e905f9050206050d0d041a002a003a0003090001e9
00f90002001007200730070320070107071615032503350303060301e603
f6030203af04bf0402045016b01602301660169016c016f016052f160101
025f141313760d010d0503040012003f323f335d392f33ed32015d5d712f
5d335d717111332f5d71335d717112393d2f33335d71715d717112393912
393931305d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d2103210323013309012e
03270e03070321048fa1fd7ea2c6023fd90236fdae101d160f01020e171d
0fb4020f019cfe640581fa7f04022852432d05052e445228fe31>XJIXJP+LiberationSans AddT42Char 
1 2852 13 <00020056ffec041d044e000e00220074403b7920892002741c841c027616
8616027912891202960ca60c02040c140c020b091b09020b051b05020402
14020207004740900f010f248030240124b8ffc040141e2348df24011947
1f08010814500a101e500316003fed3fed012f5ded5d2b711a10dc5d1aed
31305e5d5d5d5d5d5d5d5d5d01100223222e02351021321e0207342e0223
220e0215141e0233323e02041dfaee71b27b4101e57eb77538bd274b6c44
456f4e292c4d693e45704e2a021efee4feea448cd38f0230468cd28c7ea4
62272963a47b7ea562282762a600>XJIXJP+LiberationSans AddT42Char 
1 3076 14 <00010085ffec03eb043a0025007940459603011a212a213a2103190e4640
2f0b8f0b02bf0b018f0b9f0bff0b030b27800146df24ef24020024102430
24f024040824b027c027d02703b027f02702ff270170270127b8ffc0400d
1317481906501f1613150c000f003f323f3fed32012b5d5d71722f5e5d71
ed1a10dc5d71721aed333130005d5d0111141e0233323e0235113311141e
0217232e0335230e0323222e023511013a1734553f40674928b401020201
aa01020302031a3e526a465a825427043afd524f6a411b2d557d510273fc
ad224b433007052c393b142f4c351d2c5c906502d100>XJIXJP+LiberationSans AddT42Char 
1 3308 15 <00010039ffec03b6044b003700bd4055742e842e026f157f158f15036b16
012536012a1b0115340105021502020b1e1b1e0224492323004840201330
13029013a013b013031339800b490a40191e480a0a2c484f1d5f1d02201d
011d6039c0390280390139b8ffc0402a272a483f3901103901132c052950
200024019024f02402242420100e5005600b700b02800b010b0b0516003f
332f5d7110ed3f332f5d7110ed123939015d5d2b5d712f5d71ed332f2bed
1a10dc5d711aed322fed31305d5d005d015d5d005d5d5d01140e0223222e
0227371e0133323e0235342e02272e0335343633321617072e0323220615
141e02171e0503b63b70a3695e97724d129f1790803a6146272e52754641
806740d3cab3d31ca2093044552e7a742b4d6c412b5a554b3821012b4c77
512b1d40694c1f575110274130313f2a1f13112a45664d949b7e8b142a39
230f4a4b2c39271d100b19232f4258000000>XJIXJP+LiberationSans AddT42Char 
1 3656 16 <0001005dffec04f80596003f00e2406e963e01443e01a63b018636018431
01972801a921010b211b212b219b2104591da91d028b11018b0701960201
0402140202843a016036016915017611012a5a2929005a40b01301134180
095a08401013480808345a001f101f401f03071f13101316487813881398
13033b130134b8fff0402f131648773487349734033a34011334052f5f6f
2a01592a014b2a01062a012a24040e5f600901520901440901090513003f
335d5d5ded3f335d5d5d5ded1239395d5d2b5d5d2b012f5e5ded332f2bed
1a10dc5d1aed322fed3130005d5d5d5d015d5d5d5d5d5d5d5d5d5d5d5d5d
01140e0223202427371e0333323e0235342e02272e0535343e0233321e02
17072e0323220e0215141e02171e0504f84590db96fef9feda28b90e3a63
9266558e66393f729e603b776d6046285190c47283ba804d17bc0e35567b
53628551233f6c8e50418176674c2b018559966d3db8ae25375a41241d3c
5f4245563826160d1f2b3a516b46648f5c2a29527950213350361c233c51
2f3f513624120f1f2b3a54720000>XJIXJP+LiberationSans AddT42Char 
1 4060 17 <00020084fe57041d044d0026003a009440106938793802692a792a028624
96240224b8ffe04013070a48491f591f024907590702860396030203b8ff
e0403f070a48004740a02701273c80311c0f46001010103010f010040810
b03c013f3c01703c903c021f3c01ff3c01c03ce03c021c2c502210160f0f
1b0836500516003fed323f3f3fed32015d5d717172722f5e5ded32321a10
dc5d1aed31302b5d5d5d2b5d5d5d01140e0223222627231e031511231134
2e0227331e0315333e0333321e0207342e0223220e0215141e0233323e02
041d285d997074ae2e0501010101b401020201ae0103030304194052653f
70995d28bd183b624a3c6a4f2e26496c464b633b1802227bd09655586402
20303b1dfe59050627483b2a090324333a1a34492f155091cd81649c6c38
2260a987739f622b3a6e9f00>XJIXJP+LiberationSans AddT42Char 
1 4372 18 <000200890000013d05cc000300070073400d030746000004100430040308
04b8ffc0402a15184804040809ff0901e00901df0901b009c009029f0901
70098009021f0901000901f00901df090109b8ffc040112225484f09011f
0901050f041500530100003fed3f3f015d712b7171727272727272727211
12392f2b5e5d33ed323130133533150311331189b4b4b40520acacfae004
3afbc6000000>XJIXJP+LiberationSans AddT42Char 
1 4528 19 <0001008a0000013e05cc0003006f40340346c00001d00001000010003000
f000040800e005f00502df0501b005c005029f050170058005020f051f05
02f00501df050105b8ffc0401b2225484f0501ff050170058005c005d005
e005051f050101000015003f3f015d5d5d712b71717272727272722f5e5d
7172ed3130331133118ab405ccfa3400>XJIXJP+LiberationSans AddT42Char 
1 4664 20 <000200a8000004ea0581000e001700754053a902019317019b10ab10020a
031a032a0303050c150c250c03005a400f198040190140190114075a0008
100840080308065f1f142f144f145f147f14050f14cf14ff140307144009
1148141407135f09030712003f3fed12392f2b5e5d71ed012f5ded325d71
1a10dc1aed3130005d5d5d5d5d01140e02232111231121321e0207342623
211121323604ea3d79b679fe62bf02517dba7c3ec0a4a4fe850183a59b03
d95c9f7544fddb05813d6f9d61868bfdd4920000>XJIXJP+LiberationSans AddT42Char 
1 4864 21 <00010005fe5703fc043a001f02cf403b9303019302019910019600018d10
9d10028d009d00027a1d8a1d9a1d03691d019d1e011e100d104892130186
130172130156136613029212010312b8fff040240d104810001808180818
111e1f10991f01861f01591f01461f01191f01061f01081f1211b8fff040
24110621010621262136214621662176218621a621b621c621e621f6210c
c7e621f6210221b8ffc040ffd9e948c42101a621b6210284210106212621
3621462166217621060621262136214621662176218621a621b621c621e6
21f6210c0621162126214621562166218621a621c621e621f6210b97f421
01e02101c221d22102b42101a02101822192210274210160210142215221
023421012021010221122102e421f42102c221d22102a421b42102822192
21026421742102422152210224213421020221122102e421f42102c221d2
2102a421b421028221922102642174210256210142210124213421021621
0102210167e421f42102d62101c22101a421b42102962101822101642174
21025621014221012421342102162101022101e421f42102d6210140a6c2
210101a021b0210284219421026021702102442154210220213021020421
142102e021f02102c421d42102a021b02102842194210260217021024421
5421022021302102042114210237e02101c421d42102a021018421942102
60210144215421022021010421142102e02101c421d42102a02101842194
210260210102002120213021502104502180219021c021042f2101002110
21020710001800201e110f0c50051b003fed3f331133331133015e5d5d5d
715f717171717172727272727272725e5d5d5d5d5d5d5d5d717171717171
5f7171717272727272727272727272725e5d5d5d5d5d5d5d5d5d5d717171
71717171717272727272727272727272725e5d71727272722b725e5d712f
38332f5e5d5d5d5d5d5d38331239393d2f182f11333331302b5f5d5d5d5d
5d2b5d5d5d005d5d015d5d5d5d210e0323222627351e013332363f010133
131e03173e03371333025c264f62784e223a201330114f883311fe53c0e4
0a1f1f180203171d1e0ad4be629d6f3b040787030376812b0435fdaa1b5a
5a48090b4150521e026a>XJIXJP+LiberationSans AddT42Char 
1 5684 22 <0001008800000623044e003b02c2b9002affe0b3080b4820b8ffe040ff08
0b48223b4600000d2e46d92ff92f02b62f01292f592f892f03062f01a62f
b62fd62fe62f04892f01762f01592f01062f162f462f03072f190c46c60d
01060d160d360de60df60d05080dfb3d01c93dd93de93d03bb3d01993d01
8b3d01693d793d025b3d01493d012b3d3b3d02f93d01eb3d01d93d01cb3d
01bd3d01993d018b3d01693d015b3d01293d393d021b3d01093d01caeb3d
fb3d02693d893d993db93dc93d055b3d014d3d01293d393d021b3d01f93d
01eb3d01c93dd93d02bb3d01993d018b3d017d3d01012b3d4b3d5b3d6b3d
041f3d01043d01cb3deb3d02af3dbf3d028b3d017f3d012b3d4b3d5b3d6b
3d041f3d010b3d019aff3d01eb3d40ff01df3d01bb3d01af3d018b3d9b3d
027f3d015b3d6b3d024f3d013b3d01243d010b3d01eb3d01df3d01bb3d01
af3d019b3d017f3d8f3d02643d014b3d013f3d012b3d010f3d1f3d02eb3d
01df3d017b3d8b3dab3dbb3d046f3d013b3d011f3d010b3d016abb3dcb3d
eb3d03af3d018b3d017f3d015b3d014f3d011b3d01fb3d01df3def3d02bb
3dcb3d02af3d01643d943d021b3d2b3d4b3d03043d01f43d018b3dab3ddb
3d037f3d016b3d01343d011b3d010f3d0139bb3ddb3dfb3d03a03d01743d
943d022b3d4b3d5b3d031f3d010b3d01cb3deb3dfb3d03a43d011b3d4b3d
5b3d7b3d04f43d01d03d0102603d903da03dc03d044f3d01303d012f3d01
0040133d010822355028101906501f10130f2f0d0015003f32323f3fed32
3fed32015e5d5d5d5d5d5f5d5d7171717272727272725e5d5d5d5d5d5d5d
71717171717171727272727272725e5d5d5d5d5d5d5d7171717171717171
7171717272727272727272727272725e5d5d5d5d5d5d5d7171715f717171
717171717272727272725e5d5d5d5d5d5d5d5d5d5d5d5d71717171717171
71712f5e5d71ed322f5e5d5d5d5d5d71717171ed12392fed393130002b2b
2111342e0223220e0215112311342e0227331e0315333e0333321617333e
0333321e0215112311342e0223220e0215110300142f4c37395c4123b301
020201aa010203020318384b61407b8f1c03183c50644052774c24b2142f
4c37395c412302ae4f6a411b2d557d51fd8d0353224b433007052c393b14
2f4c351d626b2f4c351d2c5c9164fd2f02ae4f6a411b2b547e53fd8d>XJIXJP+LiberationSans AddT42Char 
1 6552 23 <00020056ffec03ef05cc001f0033007b405755226522025a326a32023901
490102360a460a020904190479048904040607160776078607041346402a
008f12ef120212358020471f06010670359035021f3501ff3501c035e035
02191512000b2f5008100025500316003fed323fed323f3f015d5d71712f
5ded1a10dc5d32321aed3130005d5d5d5d5d5d250e012322021110213216
1733342e013435113311141e0217232e033501141e0233323e0235342e02
23220e02033532a57acdc1018e7ba432020101b401020201ac02030302fd
da1c3e6045476d4926264a6b464260401fae685a0114011802365a620a2b
2f2a0901a3fb1327483c2b090a2530351a017070a067302e67a678739f62
2b2e66a30000>XJIXJP+LiberationSans AddT42Char 
1 6828 24 <00010088000003ee044e0025006db90022ffe04024070b48254640500001
9f00ff00020027800027c027d027e02704c027010f270180270127b8ffc0
4020131748190c46c00d01000d100d300de00df00d05080d1906501f1013
0f0d0015003f323f3fed32012f5e5d71ed322b5d7171721a10dc5d711aed
31302b2111342e0223220e0215112311342e0227331e0315333e0333321e
02151103391734553f40674928b401020201aa01020302031a3e526a465a
82542702ae4f6a411b2d557d51fd8d0353224b433007052c393b142f4c35
1d2c5c9164fd2f000000>XJIXJP+LiberationSans AddT42Char 
1 7048 25 <00020056fe5703ef044b0031004500d940487a318a31027607860702653e
01550c650c025a3a6a3a0226033603022612012921010917191779178917
04061d161d761d861d04092f46403222300e017f0edf0e020e4780064605
b8ffc04051171c4805053c470f1a010a1a2047404702cf47010047204790
47b0470450df4701c047014f47018047a047020f472f4702d047f047020f
470108290f2237501f100f41501516095035060126060106001b003f325d
5ded3fed323fed323f015e5d5d71717272725e5d5d712f5e5ded332f2bed
1a10dc5d7132321aed3130005e5d5d5d5d5d5d5d5d5d5d01222e0227371e
0133323e023d01230e0323222e0235343e023332161733343e0237330e03
1511140613342e0223220e0215141e0233323e0202245d9066400eb5127b
643d64462602143b55704867935d2b2b619b6f73a92e0203030402ab0102
0201df2c315067364563411f1f40624436675232fe572647623c1a4b5122
4b7856ae294b3a23458acd8782d0914d6961193e372803092b3c4927fcc5
e3e503c671a166303067a170759f622a2e649e000000>XJIXJP+LiberationSans AddT42Char 
1 7460 26 <000100bd0000017c05810003007a4046035a0f00010c0000013d10002000
d0000360007000020000100040005000b000050700af05010005a005b005
030005100540055005a005b005c005f0050820059005f0050305b8ffc0b3
383d4805b8ffc0b32d304805b8ffc0b60d104801030012003f3f012b2b2b
5d71725d2f5e5d71725e5d5e5ded313033113311bdbf0581fa7f0000>XJIXJP+LiberationSans AddT42Char 
1 7608 27 <000100a800000491058100090069b90002ffc0b60d184802020608b8ffc0
403a070c4808080b01055a000610064006030706300b01045fef01010f01
3f016f017f019f01af01cf01df0108080140171e48010105005f07030512
003f3fed12392f2b5e5d71ed015d2f5e5ded3211332f2b12392f2b313001
11211521112311211501670312fceebf03e904e5fdf49efdc505819c>XJIXJP+LiberationSans AddT42Char 
1 7756 28 <000100a8000006020581002c022c400c982901971f010c101218480cb8ff
f0b30d11480db8fff0401b121848280d010d100d11482a202125482a2012
1c482a200911481eb8ffe0b32125481eb8ffe0b3121c481eb8ffe040ff09
11480d0c24241b2c5c2a2400340002d400018b009b000204000108002e8b
2e01742e013b2e01cb2e01b42e010b2e01cfab2e01342e01202e01142e01
002e01f42e01d02e01c42e01b02e01742e842ea42e03602e01542e01402e
01342e01102e01042e0197f02e01b42ec42ee42e03a02e01742e942e0250
2e01442e01302e01042e242e02f42e01e02e01b42ed42e02902e01842e01
702e01342e442e642e03202e01142e01f42e01d02e01742e842ea42ec42e
04602e01342e542e02102e01042e0167742e942eb42ec42ee42e05502e01
042e242e442e03142e342e442e642e842eb42ed42ef42e08a42ec42ef42e
038b2e01042e342e542e742e04374053e42e01cb2e01242e442e742e942e
b42e050b2e01d42ef42e02bb2e01642e842e024b2e01142e342e02fb2e01
a42ec42ee42e03802e0102402e502e702e033f2e01002e202e021e1b5c00
1c401c02071c061515b8ffc040101225482a151d034b2401000d24031c12
003f17335d3f33332b1133012f5e5ded325d5d5d5f5d5d5d717171717172
7272725e5d5d5d717272725e5d5d5d5d5d5d5d7171717171717171717272
7272727272725e5d5d5d5d5d5d5d5d5d5d5d71717171715e5d5d5d717171
10dc5e5d5d5d7132ed12393d2f333331302b2b2b2b2b2b2b5d2b2b2b5d5d
2111343637363706070e01070123012e0327262716171e01151123113301
1e03173e03370133110556020202030e0f0d1f0ffe9486fe8f060d0f0f07
111001020202aafb01770714120f0303101514080170f503ac336a2c3330
33322b6127fc4003c00f282d2f17353938372f6727fc540581fc2f143f42
3b10103c423e1403d1fa7f000000>XJIXJP+LiberationSans AddT42Char 
XJIXJP+LiberationSans /CharStrings get begin
/g12 12 def
/g13 13 def
/g14 14 def
/g15 15 def
/g16 16 def
/g17 17 def
/g18 18 def
/g19 19 def
/g20 20 def
/g21 21 def
/g22 22 def
/g23 23 def
/g24 24 def
/g25 25 def
/g26 26 def
/g27 27 def
/g28 28 def
end
XJIXJP+LiberationSans /Encoding get
dup 12 /g12 put
dup 13 /g13 put
dup 14 /g14 put
dup 15 /g15 put
dup 16 /g16 put
dup 17 /g17 put
dup 18 /g18 put
dup 19 /g19 put
dup 20 /g20 put
dup 21 /g21 put
dup 22 /g22 put
dup 23 /g23 put
dup 24 /g24 put
dup 25 /g25 put
dup 26 /g26 put
dup 27 /g27 put
dup 28 /g28 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XJIXJP+LiberationSans*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 227{/.notdef}rp]
XJIXJP+LiberationSans nf
XJIXJP+LiberationSans*1 [6.592 0 0 -6.592 0 0 ]msf
170.807 99.0289 mo
(\014\003\001\015\016\017\005\020\021\002\003\022\002\023\005\024\025\001\002\026\022\027\005\024\015\015\023\022\030\031)
[4.3837 1.81274 2.23462 3.65857 3.68494 3.32236 1.81274 4.3837 3.65857 3.68491 1.81277 1.47659 
3.65857 1.47659 1.81277 4.38367 3.32236 2.20169 3.68494 5.49768 1.45023 3.65857 1.83911 4.3837 
3.68491 3.65857 1.47659 1.45026 3.65858 0 ]xsh
27.53 113.301 mo
(\032\030\021\016\003\005\033\004\002\003\016\001\004\005\034\002\021)
[1.81276 3.68492 3.65855 3.68492 1.81276 1.81276 4.04749 3.65855 3.68494 1.81274 3.68494 2.20168 
3.68492 1.81276 5.49768 3.65854 0 ]xsh
108.245 102.764 mo
188.771 102.764 li
161.907 130.486 li
81.3809 130.486 li
108.245 102.764 li
cp
81.3809 102.764 mo
81.3809 102.764 li
cp
188.771 130.486 mo
188.771 130.486 li
cp
.0845655 .0612802 .0657359 0 cmyk
ef
108.245 102.764 mo
188.771 102.764 li
161.907 130.486 li
81.3809 130.486 li
108.245 102.764 li
cp
.75021 .679683 .670222 .90164 cmyk
@
81.3809 102.764 mo
81.3809 102.764 li
cp
@
188.771 130.486 mo
188.771 130.486 li
cp
@
135.867 115.817 mo
134.12 115.817 li
134.12 112.323 li
137.614 112.323 li
137.614 115.817 li
135.867 115.817 li
cp
.0273747 .767636 .82916 .000579843 cmyk
ef
135.867 115.817 mo
134.12 115.817 li
134.12 112.323 li
137.614 112.323 li
137.614 115.817 li
135.867 115.817 li
cp
.75021 .679683 .670222 .90164 cmyk
@
.951614 lw
129.209 110.576 mo
149.975 110.576 li
143.053 117.498 li
122.287 117.498 li
129.209 110.576 li
cp
0 .49662 1 0 cmyk
@
122.287 110.576 mo
122.287 110.576 li
cp
@
149.975 117.498 mo
149.975 117.498 li
cp
@
125.023 109.027 mo
156.205 109.027 li
145.789 119.41 li
114.64 119.41 li
125.023 109.027 li
cp
.573236 .881407 .189609 .0343023 cmyk
@
114.64 109.027 mo
114.64 109.027 li
cp
@
156.205 119.41 mo
156.205 119.41 li
cp
@
120.474 106.951 mo
164.643 106.951 li
149.909 121.849 li
105.773 121.849 li
120.474 106.951 li
cp
.648219 .252201 1 .0799878 cmyk
@
105.773 106.951 mo
105.773 106.951 li
cp
@
164.643 121.849 mo
164.643 121.849 li
cp
@
116.551 105.566 mo
171.104 105.566 li
152.909 123.893 li
98.3564 123.893 li
116.551 105.566 li
cp
.748745 .42002 .102968 .000427253 cmyk
@
98.3564 105.566 mo
98.3564 105.566 li
cp
@
171.104 123.893 mo
171.104 123.893 li
cp
@
15.9183 6.58124 mo
58.6371 6.58124 li
58.6371 35.7856 li
15.9183 35.7856 li
15.9183 6.58124 li
cp
15.9183 6.58124 mo
15.9183 6.58124 li
cp
58.6371 35.7856 mo
58.6371 35.7856 li
cp
0 .74255 1 0 cmyk
ef
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: IAAAAA+ArialMT Initial
ct_T42Dict begin
0 -0.012 0.68 0.727
 256 array 0 1 255 {1 index exch /.notdef put} for  /IAAAAA+ArialMT
Type42DictBegin
[<00010000000b000b000b000b6376742095dc74da000000bc000006306670
676d57a22a11000006ec000005b0676c7966ec09f28a000044540000132c
68656164cf41880e00000c9c00000036686865615dfe820700000cd40000
0024686d7478e7071b3200000cf8000000406c6f6361ef2a1a2a00000d38
000000266d617870610a770400000d60000000206e616d6550c7cd890000
0d8000002bd1707265709d799e1a0000395400000afd6764697200000000
000000000000000005ba001905ba001a05a70019042600180000ffe70000
ffe80000ffe7fe69ffe805ba0019fe69ffe802ea000000b8000000b80000
000000a800ad016900ad00bf00c201f0001800af00b900b400c800170044
009c007c009400870006005a00c80089005200520005004400940119ffb4
002f00a1000300a100cd00170057007e00ba00160118ffe9007f008503d3
00870085000d002200410050006f008d014cff75005c00df04830037004c
006e00700180ff58ff8eff92ffa400a500b903c8fffd000b001a00630063
00cdffee05d8ffdc002d005c0095009900df019209b500400057008000b9
039d0072009a035d0401ff67fffa00030021007700cd0004004d00cd01c0
022b004c006500e70118017c034305d8ffa3ffb0ffc40003001c005d0068
009a00ba013501470221055cff4dffcd0016002d00780080009900b200b6
00b600b800bd00da010c05f0ffa4fff00019002c0049007f00b400ce01c0
03fefd81fe3f000000050018002900390049006f00be00c700d0012301c1
026f050c05320540057affd4001400310055005700a700b400e601f7027e
027e027f03c60446ff42000e0085009100bf00c200c500e1011a012f014f
01560229026f029e03720008002c00310031006400690089009800c700de
012b01b6020c02cf03a304ab04fb061dfee0ff0e00060026009b009d00c1
010d011801200173018201d601e30243025f029b02e2039404a904d20761
001c005e006d008d00ab00f7011201380151015b0168017c018701910199
01cd01d001e802410254026b02ef0368037103bd04420442045304730483
0586058b06e8fe58fec4fed1fef7ff32ff860051007c008100910095009e
00b400b900cf00d900d900df00e20105010b010e010e012001210155017b
017b017e018d01a201a801a901b401d001d001e201e901f201f501fb0200
02000206021b0221022202220223027202770294029c02cf02cf02d002ec
02f903170322032b0335033c0359036f037103870390039003b503e1041a
04cf04ff053205320596059f05a805ab05c205f0060c0782080008ccfca3
fd2afddefe00fe88fe96feb2feb4ffe100150019001a001c001f003c0051
00610061006a0078009600a500af00d3010c0118011a012a013e014c0151
015f016a0171017801820184019a01a501a801a901ae01bc01cd01d701ef
0200020d021c02210222022e02350242024f024f025e0265027102900292
02b402d602fa0307030b030f0315032a0347035d036503740379039603b0
03cc03dd03e203f603fc03fc03ff040a041f04220426042b0447045f0475
049e04e704e7055c05cb05e5060a066d068606b806f10736073e07500751
075d078f07b607d4086000b600c300b500b7000000000000000000000000
01e00381034503b5008e0233041902ce02ce002d005f0064034d023f0000
02a80188027d01b402240578063b023b014e00f00426029402c6029f02f6
023b034d014b0153006a0231000000000000061404aa0000003c04c300ed
04bc026502ce03b50078060c017e02ef060c00b201000239000001c50330
042b03cb00da03df010704a100db040a011701ed02a70350010b01bd043e
05580021039c00ae0371017d00b5024500000afb088c012b014e01aa0087
0054013201f803ff0003024e00b4003703e30083006b02d800ed00770088
009701640467008e0033017c00e700a6029e0329056e062a061501c90269
048a021301b4000204a9000002390124010305140084015d039a06ef02d9
007500cf040a00de03ac04bc02cf02ae034d04f005520168006d007d0086
0071ff810079055804d2016700030156002504e00094007c033204210094
007f0072005c002f00b6001800ba00b80041034d00720018001f004c016a
01550099009a009a009800b200040078006900140057006e00ce00b40654
02b80067050e016500e7000004cbfe52005affa60099ff67006eff92002d
ffd40087ff7c00b800a800e5008f00a80185fe7b0070001e00d900de014c
054602cf0546ff2d028a02d90253029600b7000000000000000000000000
00000125011800ea00ea00ae0046003e05bb008a04d70053003fff8cffd5
00150028002200990062004a00e4006d00ee00e5004803c00033fe4e02b1
ff460370007905df0051ffa7ff1f010a0068ff6c004f00bc00a507050061
072b404141403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827
262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b09051582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b01723
70b10217453ab10200080d2d2c45b01a234445b01923442d2c2045b00325
456164b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c
2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b1
2cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb01723
44b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb01723
44b0177ae41b038a45186920b01723448a8a8720b0a05158b0112bb01723
44b0177ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c48
2d2c4b53205c58b002855958b00185592d2c20b0032545b019234445b01a
23444565234520b00325606a20b009234223688a6a606120b01a8ab00052
7921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a
5279b31940201945208a54582321b03f1b235961442d2cb110114323430b
2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2c
b10e0f432343650b2d2cb11011432343650b2d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c4bb06451584569b00943608a103a1b21
2121592d2c01b005251023208af500b0016023edec2d2c01b00525102320
8af500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c
003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006
430b2d2c3eb02a2a2d2c352d2c76b8022323701020b802234520b0005058
b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c6423
648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb815
55621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb400
0100000015b00826b00826b00826b008260f10161345683ab001162d2cb4
000100000015b00826b00826b00826b008260f1016134568653ab001162d
2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b2121
592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb01343
58031b02592d2cb0134358021b03592d2c4b54b012435c5a58381b212159
2d2cb012435c580cb00425b00425060c6423646164b807085158b00425b0
0425012046b01060482046b0106048590a21211b2121592d2cb012435c58
0cb00425b00425060c6423646164b807085158b00425b00425012046b8ff
f060482046b8fff06048590a21211b2121592d2c4b53234b515a58b03a2b
1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab012
435c5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c
5a58381b2121592d2c4b5258b00425b0042549b00425b00425496120b000
5458212043b0005558b00325b00325b8ffc038b8ffc038591bb040545820
43b0005458b00225b8ffc038591b2043b0005458b00325b00325b8ffc038
b8ffc0381bb00325b8ffc03859595959212121212d2c462346608a8a4623
20468a608a61b8ff8062232010238ab902c202c28a70456020b0005058b0
0161b8ffba8b1bb0468c59b0106068013a2d000100000002d1ece7eaa9aa
5f0f3cf5081b080000000000a2e3272a00000000000000000000ffe60576
05d300000009000100000000000000010000073efe4e0043000000000000
000000010000000000000000000000000000000e0600010005c700660473
0044047300870400001a040000880473004b02aa008501c70083023900b9
02390000047300560400000f0473004d00df003c0053001a0000003600c5
015101db02a403a5044a04aa04fc052a052a05d406b4075107a1084608ff
09960000000100000012003100030000000000020010002f00420000040c
0afd0003000200000046034e000000030000000000fe0000000000030000
0001000a00fe0000000300000002000e01080000000300000003005e0116
0000000300000004000a017400000003000000050018017e000000030000
0006000e0196000000030000000700c401a4000000030000000800260268
0000000300000009008a028e000000030000000a04c20318000000030000
000b006207da000000030000000c0066083c000000030000000d06b408a2
000000030000000e005c0f560001000000000000007f0fb2000100000000
0001000510310001000000000002000710360001000000000003002f103d
00010000000000040005106c0001000000000005000c1071000100000000
00060007107d0001000000000007006210840001000000000008001310e6
0001000000000009004510f9000100000000000a0261113e000100000000
000b0031139f000100000000000c003313d0000100000000000d035a1403
000100000000000e002e175d0003000104030002000c178b000300010405
0002001017970003000104060002000c17a70003000104070002001017b3
0003000104080002001017c3000300010409000000fe17d3000300010409
0001000a18d10003000104090002000e18db0003000104090003005e18e9
0003000104090004000a1947000300010409000500181951000300010409
0006000e1969000300010409000700c41977000300010409000800261a3b
0003000104090009008a1a61000300010409000a04c21aeb000300010409
000b00621fad000300010409000c0066200f000300010409000d06b42075
000300010409000e005c272900030001040a0002000c278500030001040b
00020010279100030001040c0002000c27a100030001040e0002000c27ad
0003000104100002000e27b90003000104130002001227c7000300010414
0002000c27d90003000104150002001027e50003000104160002000c27f5
0003000104190002000e280100030001041b00020010280f00030001041d
0002000c281f00030001041f0002000c282b0003000104240002000e2837
00030001042a0002000e284500030001042d00020000285300030001080a
0002000c28530003000108160002000c285f000300010c0a0002000c286b
000300010c0c0002000c2877005400790070006500660061006300650020
00a900200054006800650020004d006f006e006f00740079007000650020
0043006f00720070006f0072006100740069006f006e00200070006c0063
002e00200044006100740061002000a900200054006800650020004d006f
006e006f007400790070006500200043006f00720070006f007200610074
0069006f006e00200070006c0063002f005400790070006500200053006f
006c007500740069006f006e007300200049006e0063002e002000310039
00390030002d0031003900390032002e00200041006c006c002000520069
006700680074007300200052006500730065007200760065006400410072
00690061006c0052006500670075006c00610072004d006f006e006f0074
007900700065003a0041007200690061006c00200052006500670075006c
00610072003a00560065007200730069006f006e00200032002e00380032
00200028004d006900630072006f0073006f006600740029004100720069
0061006c00560065007200730069006f006e00200032002e003800320041
007200690061006c004d00540041007200690061006c00ae002000540072
006100640065006d00610072006b0020006f006600200054006800650020
004d006f006e006f007400790070006500200043006f00720070006f0072
006100740069006f006e00200070006c0063002000720065006700690073
0074006500720065006400200069006e0020007400680065002000550053
00200050006100740020002600200054004d0020004f00660066002e0020
0061006e006400200065006c0073006500770068006500720065002e004d
006f006e006f00740079007000650020005400790070006f006700720061
007000680079004d006f006e006f00740079007000650020005400790070
0065002000440072006100770069006e00670020004f0066006600690063
00650020002d00200052006f00620069006e0020004e006900630068006f
006c00610073002c00200050006100740072006900630069006100200053
00610075006e0064006500720073002000310039003800320043006f006e
00740065006d0070006f0072006100720079002000730061006e00730020
00730065007200690066002000640065007300690067006e002c00200041
007200690061006c00200063006f006e007400610069006e00730020006d
006f00720065002000680075006d0061006e006900730074002000630068
006100720061006300740065007200690073007400690063007300200074
00680061006e0020006d0061006e00790020006f00660020006900740073
0020007000720065006400650063006500730073006f0072007300200061
006e0064002000610073002000730075006300680020006900730020006d
006f0072006500200069006e002000740075006e00650020007700690074
006800200074006800650020006d006f006f00640020006f006600200074
006800650020006c00610073007400200064006500630061006400650073
0020006f006600200074006800650020007400770065006e007400690065
00740068002000630065006e0074007500720079002e0020002000540068
00650020006f0076006500720061006c006c002000740072006500610074
006d0065006e00740020006f006600200063007500720076006500730020
0069007300200073006f006600740065007200200061006e006400200066
0075006c006c006500720020007400680061006e00200069006e0020006d
006f0073007400200069006e0064007500730074007200690061006c0020
007300740079006c0065002000730061006e007300200073006500720069
0066002000660061006300650073002e00200020005400650072006d0069
006e0061006c0020007300740072006f006b006500730020006100720065
00200063007500740020006f006e00200074006800650020006400690061
0067006f006e0061006c002000770068006900630068002000680065006c
0070007300200074006f0020006700690076006500200074006800650020
0066006100630065002000610020006c0065007300730020006d00650063
00680061006e006900630061006c00200061007000700065006100720061
006e00630065002e002000200041007200690061006c0020006900730020
0061006e002000650078007400720065006d0065006c0079002000760065
00720073006100740069006c0065002000660061006d0069006c00790020
006f00660020007400790070006500660061006300650073002000770068
006900630068002000630061006e00200062006500200075007300650064
0020007700690074006800200065007100750061006c0020007300750063
006300650073007300200066006f00720020007400650078007400200073
0065007400740069006e006700200069006e0020007200650070006f0072
00740073002c002000700072006500730065006e0074006100740069006f
006e0073002c0020006d006100670061007a0069006e0065007300200065
00740063002c00200061006e006400200066006f00720020006400690073
0070006c00610079002000750073006500200069006e0020006e00650077
0073007000610070006500720073002c0020006100640076006500720074
006900730069006e006700200061006e0064002000700072006f006d006f
00740069006f006e0073002e0068007400740070003a002f002f00770077
0077002e006d006f006e006f0074007900700065002e0063006f006d002f
00680074006d006c002f006d0074006e0061006d0065002f006d0073005f
0061007200690061006c002e00680074006d006c0068007400740070003a
002f002f007700770077002e006d006f006e006f0074007900700065002e
0063006f006d002f00680074006d006c002f006d0074006e0061006d0065
002f006d0073005f00770065006c0063006f006d0065002e00680074006d
006c004e004f00540049004600490043004100540049004f004e0020004f
00460020004c004900430045004e00530045002000410047005200450045
004d0045004e0054000d000a000d000a0054006800690073002000740079
007000650066006100630065002000690073002000740068006500200070
0072006f007000650072007400790020006f00660020004d006f006e006f
00740079007000650020005400790070006f006700720061007000680079
00200061006e006400200069007400730020007500730065002000620079
00200079006f007500200069007300200063006f00760065007200650064
00200075006e00640065007200200074006800650020007400650072006d
00730020006f0066002000610020006c006900630065006e007300650020
00610067007200650065006d0065006e0074002e00200059006f00750020
00680061007600650020006f0062007400610069006e0065006400200074
00680069007300200074007900700065006600610063006500200073006f
006600740077006100720065002000650069007400680065007200200064
00690072006500630074006c0079002000660072006f006d0020004d006f
006e006f00740079007000650020006f007200200074006f006700650074
0068006500720020007700690074006800200073006f0066007400770061
007200650020006400690073007400720069006200750074006500640020
006200790020006f006e00650020006f00660020004d006f006e006f0074
007900700065002700730020006c006900630065006e0073006500650073
002e000d000a000d000a005400680069007300200073006f006600740077
00610072006500200069007300200061002000760061006c007500610062
006c00650020006100730073006500740020006f00660020004d006f006e
006f0074007900700065002e00200055006e006c00650073007300200079
006f00750020006800610076006500200065006e00740065007200650064
00200069006e0074006f0020006100200073007000650063006900660069
00630020006c006900630065006e00730065002000610067007200650065
006d0065006e00740020006700720061006e00740069006e006700200079
006f00750020006100640064006900740069006f006e0061006c00200072
00690067006800740073002c00200079006f007500720020007500730065
0020006f00660020007400680069007300200073006f0066007400770061
007200650020006900730020006c0069006d006900740065006400200074
006f00200079006f0075007200200077006f0072006b0073007400610074
0069006f006e00200066006f007200200079006f007500720020006f0077
006e0020007000750062006c0069007300680069006e0067002000750073
0065002e00200059006f00750020006d006100790020006e006f00740020
0063006f007000790020006f007200200064006900730074007200690062
0075007400650020007400680069007300200073006f0066007400770061
00720065002e000d000a000d000a0049006600200079006f007500200068
00610076006500200061006e00790020007100750065007300740069006f
006e00200063006f006e006300650072006e0069006e006700200079006f
00750072002000720069006700680074007300200079006f007500200073
0068006f0075006c00640020007200650076006900650077002000740068
00650020006c006900630065006e00730065002000610067007200650065
006d0065006e007400200079006f00750020007200650063006500690076
0065006400200077006900740068002000740068006500200073006f0066
007400770061007200650020006f007200200063006f006e007400610063
00740020004d006f006e006f007400790070006500200066006f00720020
006100200063006f007000790020006f006600200074006800650020006c
006900630065006e00730065002000610067007200650065006d0065006e
0074002e000d000a000d000a004d006f006e006f00740079007000650020
00630061006e00200062006500200063006f006e00740061006300740065
0064002000610074003a000d000a000d000a0055005300410020002d0020
002800380034003700290020003700310038002d00300034003000300009
00090055004b0020002d0020003000310031003400340020003000310037
003300370020003700360035003900350039000d000a0068007400740070
003a002f002f007700770077002e006d006f006e006f0074007900700065
002e0063006f006d0068007400740070003a002f002f007700770077002e
006d006f006e006f0074007900700065002e0063006f006d002f00680074
006d006c002f0074007900700065002f006c006900630065006e00730065
002e00680074006d006c547970656661636520a920546865204d6f6e6f74
79706520436f72706f726174696f6e20706c632e204461746120a9205468
65204d6f6e6f7479706520436f72706f726174696f6e20706c632f547970
6520536f6c7574696f6e7320496e632e20313939302d313939322e20416c
6c20526967687473205265736572766564417269616c526567756c61724d
6f6e6f747970653a417269616c20526567756c61723a56657273696f6e20
322e383220284d6963726f736f667429417269616c56657273696f6e2032
2e3832417269616c4d54417269616ca82054726164656d61726b206f6620
546865204d6f6e6f7479706520436f72706f726174696f6e20706c632072
65676973746572656420696e2074686520555320506174202620544d204f
66662e20616e6420656c736577686572652e4d6f6e6f7479706520547970
6f6772617068794d6f6e6f7479706520547970652044726177696e67204f
6666696365202d20526f62696e204e6963686f6c61732c20506174726963
6961205361756e646572732031393832436f6e74656d706f726172792073
616e732073657269662064657369676e2c20417269616c20636f6e746169
6e73206d6f72652068756d616e6973742063686172616374657269737469
6373207468616e206d616e79206f6620697473207072656465636573736f
727320616e642061732073756368206973206d6f726520696e2074756e65
207769746820746865206d6f6f64206f6620746865206c61737420646563
61646573206f6620746865207477656e74696574682063656e747572792e
2020546865206f766572616c6c2074726561746d656e74206f6620637572
76657320697320736f6674657220616e642066756c6c6572207468616e20
696e206d6f737420696e647573747269616c207374796c652073616e7320
73657269662066616365732e20205465726d696e616c207374726f6b6573
2061726520637574206f6e2074686520646961676f6e616c207768696368
2068656c707320746f20676976652074686520666163652061206c657373
206d656368616e6963616c20617070656172616e63652e2020417269616c
20697320616e2065787472656d656c7920766572736174696c652066616d
696c79206f66207479706566616365732077686963682063616e20626520
75736564207769746820657175616c207375636365737320666f72207465
78742073657474696e6720696e207265706f7274732c2070726573656e74
6174696f6e732c206d6167617a696e6573206574632c20616e6420666f72
20646973706c61792075736520696e206e6577737061706572732c206164
766572746973696e6720616e642070726f6d6f74696f6e732e687474703a
2f2f7777772e6d6f6e6f747970652e636f6d2f68746d6c2f6d746e616d65
2f6d735f617269616c2e68746d6c687474703a2f2f7777772e6d6f6e6f74
7970652e636f6d2f68746d6c2f6d746e616d652f6d735f77656c636f6d65
2e68746d6c4e4f54494649434154494f4e204f46204c4943454e53452041
475245454d454e540d0a0d0a546869732074797065666163652069732074
68652070726f7065727479206f66204d6f6e6f74797065205479706f6772
6170687920616e64206974732075736520627920796f7520697320636f76
6572656420756e64657220746865207465726d73206f662061206c696365
6e73652061677265656d656e742e20596f752068617665206f627461696e
6564207468697320747970656661636520736f6674776172652065697468
6572206469726563746c792066726f6d204d6f6e6f74797065206f722074
6f676574686572207769746820736f667477617265206469737472696275
746564206279206f6e65206f66204d6f6e6f747970652773206c6963656e
736565732e0d0a0d0a5468697320736f6674776172652069732061207661
6c7561626c65206173736574206f66204d6f6e6f747970652e20556e6c65
737320796f75206861766520656e746572656420696e746f206120737065
6369666963206c6963656e73652061677265656d656e74206772616e7469
6e6720796f75206164646974696f6e616c207269676874732c20796f7572
20757365206f66207468697320736f667477617265206973206c696d6974
656420746f20796f757220776f726b73746174696f6e20666f7220796f75
72206f776e207075626c697368696e67207573652e20596f75206d617920
6e6f7420636f7079206f722064697374726962757465207468697320736f
6674776172652e0d0a0d0a496620796f75206861766520616e7920717565
7374696f6e20636f6e6365726e696e6720796f7572207269676874732079
6f752073686f756c642072657669657720746865206c6963656e73652061
677265656d656e7420796f75207265636569766564207769746820746865
20736f667477617265206f7220636f6e74616374204d6f6e6f7479706520
666f72206120636f7079206f6620746865206c6963656e73652061677265
656d656e742e0d0a0d0a4d6f6e6f747970652063616e20626520636f6e74
61637465642061743a0d0a0d0a555341202d202838343729203731382d30
3430300909554b202d203031313434203031373337203736353935390d0a
687474703a2f2f7777772e6d6f6e6f747970652e636f6d687474703a2f2f
7777772e6d6f6e6f747970652e636f6d2f68746d6c2f747970652f6c6963
656e73652e68746d6c004e006f0072006d0061006c006f00620079010d00
65006a006e00e9006e006f0072006d0061006c005300740061006e006400
6100720064039a03b103bd03bf03bd03b903ba03ac005400790070006500
66006100630065002000a900200054006800650020004d006f006e006f00
7400790070006500200043006f00720070006f0072006100740069006f00
6e00200070006c0063002e00200044006100740061002000a90020005400
6800650020004d006f006e006f007400790070006500200043006f007200
70006f0072006100740069006f006e00200070006c0063002f0054007900
70006500200053006f006c007500740069006f006e007300200049006e00
63002e00200031003900390030002d0031003900390032002e0020004100
6c006c002000520069006700680074007300200052006500730065007200
76006500640041007200690061006c0052006500670075006c0061007200
4d006f006e006f0074007900700065003a0041007200690061006c002000
52006500670075006c00610072003a00560065007200730069006f006e00
200032002e0038003200200028004d006900630072006f0073006f006600
7400290041007200690061006c00560065007200730069006f006e002000
32002e003800320041007200690061006c004d0054004100720069006100
6c00ae002000540072006100640065006d00610072006b0020006f006600
200054006800650020004d006f006e006f00740079007000650020004300
6f00720070006f0072006100740069006f006e00200070006c0063002000
7200650067006900730074006500720065006400200069006e0020007400
68006500200055005300200050006100740020002600200054004d002000
4f00660066002e00200061006e006400200065006c007300650077006800
6500720065002e004d006f006e006f007400790070006500200054007900
70006f006700720061007000680079004d006f006e006f00740079007000
6500200054007900700065002000440072006100770069006e0067002000
4f006600660069006300650020002d00200052006f00620069006e002000
4e006900630068006f006c00610073002c00200050006100740072006900
63006900610020005300610075006e006400650072007300200031003900
3800320043006f006e00740065006d0070006f0072006100720079002000
730061006e00730020007300650072006900660020006400650073006900
67006e002c00200041007200690061006c00200063006f006e0074006100
69006e00730020006d006f00720065002000680075006d0061006e006900
730074002000630068006100720061006300740065007200690073007400
69006300730020007400680061006e0020006d0061006e00790020006f00
660020006900740073002000700072006500640065006300650073007300
6f0072007300200061006e00640020006100730020007300750063006800
20006900730020006d006f0072006500200069006e002000740075006e00
650020007700690074006800200074006800650020006d006f006f006400
20006f006600200074006800650020006c00610073007400200064006500
6300610064006500730020006f0066002000740068006500200074007700
65006e00740069006500740068002000630065006e007400750072007900
2e002000200054006800650020006f0076006500720061006c006c002000
740072006500610074006d0065006e00740020006f006600200063007500
7200760065007300200069007300200073006f0066007400650072002000
61006e0064002000660075006c006c006500720020007400680061006e00
200069006e0020006d006f0073007400200069006e006400750073007400
7200690061006c0020007300740079006c0065002000730061006e007300
2000730065007200690066002000660061006300650073002e0020002000
5400650072006d0069006e0061006c0020007300740072006f006b006500
73002000610072006500200063007500740020006f006e00200074006800
6500200064006900610067006f006e0061006c0020007700680069006300
68002000680065006c0070007300200074006f0020006700690076006500
2000740068006500200066006100630065002000610020006c0065007300
730020006d0065006300680061006e006900630061006c00200061007000
700065006100720061006e00630065002e00200020004100720069006100
6c00200069007300200061006e002000650078007400720065006d006500
6c007900200076006500720073006100740069006c006500200066006100
6d0069006c00790020006f00660020007400790070006500660061006300
650073002000770068006900630068002000630061006e00200062006500
200075007300650064002000770069007400680020006500710075006100
6c0020007300750063006300650073007300200066006f00720020007400
6500780074002000730065007400740069006e006700200069006e002000
7200650070006f007200740073002c002000700072006500730065006e00
74006100740069006f006e0073002c0020006d006100670061007a006900
6e006500730020006500740063002c00200061006e006400200066006f00
7200200064006900730070006c0061007900200075007300650020006900
6e0020006e006500770073007000610070006500720073002c0020006100
640076006500720074006900730069006e006700200061006e0064002000
700072006f006d006f00740069006f006e0073002e006800740074007000
3a002f002f007700770077002e006d006f006e006f007400790070006500
2e0063006f006d002f00680074006d006c002f006d0074006e0061006d00
65002f006d0073005f0061007200690061006c002e00680074006d006c00
68007400740070003a002f002f007700770077002e006d006f006e006f00
74007900700065002e0063006f006d002f00680074006d006c002f006d00
74006e0061006d0065002f006d0073005f00770065006c0063006f006d00
65002e00680074006d006c004e004f005400490046004900430041005400
49004f004e0020004f00460020004c004900430045004e00530045002000
410047005200450045004d0045004e0054000d000a000d000a0054006800
690073002000740079007000650066006100630065002000690073002000
7400680065002000700072006f007000650072007400790020006f006600
20004d006f006e006f00740079007000650020005400790070006f006700
72006100700068007900200061006e006400200069007400730020007500
73006500200062007900200079006f007500200069007300200063006f00
76006500720065006400200075006e006400650072002000740068006500
20007400650072006d00730020006f0066002000610020006c0069006300
65006e00730065002000610067007200650065006d0065006e0074002e00
200059006f0075002000680061007600650020006f006200740061006900
6e0065006400200074006800690073002000740079007000650066006100
63006500200073006f006600740077006100720065002000650069007400
68006500720020006400690072006500630074006c007900200066007200
6f006d0020004d006f006e006f00740079007000650020006f0072002000
74006f006700650074006800650072002000770069007400680020007300
6f0066007400770061007200650020006400690073007400720069006200
750074006500640020006200790020006f006e00650020006f0066002000
4d006f006e006f0074007900700065002700730020006c00690063006500
6e0073006500650073002e000d000a000d000a0054006800690073002000
73006f006600740077006100720065002000690073002000610020007600
61006c007500610062006c00650020006100730073006500740020006f00
660020004d006f006e006f0074007900700065002e00200055006e006c00
650073007300200079006f00750020006800610076006500200065006e00
74006500720065006400200069006e0074006f0020006100200073007000
65006300690066006900630020006c006900630065006e00730065002000
610067007200650065006d0065006e00740020006700720061006e007400
69006e006700200079006f00750020006100640064006900740069006f00
6e0061006c0020007200690067006800740073002c00200079006f007500
7200200075007300650020006f0066002000740068006900730020007300
6f0066007400770061007200650020006900730020006c0069006d006900
740065006400200074006f00200079006f0075007200200077006f007200
6b00730074006100740069006f006e00200066006f007200200079006f00
7500720020006f0077006e0020007000750062006c006900730068006900
6e00670020007500730065002e00200059006f00750020006d0061007900
20006e006f007400200063006f007000790020006f007200200064006900
730074007200690062007500740065002000740068006900730020007300
6f006600740077006100720065002e000d000a000d000a00490066002000
79006f00750020006800610076006500200061006e007900200071007500
65007300740069006f006e00200063006f006e006300650072006e006900
6e006700200079006f007500720020007200690067006800740073002000
79006f0075002000730068006f0075006c00640020007200650076006900
65007700200074006800650020006c006900630065006e00730065002000
610067007200650065006d0065006e007400200079006f00750020007200
650063006500690076006500640020007700690074006800200074006800
6500200073006f0066007400770061007200650020006f00720020006300
6f006e00740061006300740020004d006f006e006f007400790070006500
200066006f00720020006100200063006f007000790020006f0066002000
74006800650020006c006900630065006e00730065002000610067007200
650065006d0065006e0074002e000d000a000d000a004d006f006e006f00
74007900700065002000630061006e00200062006500200063006f006e00
7400610063007400650064002000610074003a000d000a000d000a005500
5300410020002d0020002800380034003700290020003700310038002d00
30003400300030000900090055004b0020002d0020003000310031003400
340020003000310037003300370020003700360035003900350039000d00
0a0068007400740070003a002f002f007700770077002e006d006f006e00
6f0074007900700065002e0063006f006d0068007400740070003a002f00
2f007700770077002e006d006f006e006f0074007900700065002e006300
6f006d002f00680074006d006c002f0074007900700065002f006c006900
630065006e00730065002e00680074006d006c004e006f0072006d006100
6c004e006f0072006d00610061006c0069004e006f0072006d0061006c00
4e006f0072006d00e1006c004e006f0072006d0061006c00650053007400
61006e00640061006100720064004e006f0072006d0061006c004e006f00
72006d0061006c006e0079004e006f0072006d0061006c041e0431044b04
47043d044b0439004e006f0072006d00e1006c006e0065004e006f007200
6d0061006c004e006f0072006d0061006c004e0061007600610064006e00
6f0074006801b001a10300006e0067004e006f0072006d0061006c004e00
6f0072006d0061006c004e006f0072006d0061006c004e006f0072006d00
61006c0000004123000f031700ef031700ff03170003001f0317002f0317
004f0317005f0317008f0317009f03170006000f0317005f0317006f0317
007f031700bf031700f00317000600400317b2923340b80317b28b3340b8
0317b36a6c3240b80317b2613340b80317b35c5d3240b80317b357593240
b80317b34d513240b80317b344493240b80317b23a3340b80317b3313432
40b80317b32e423240b80317b3272c3240b80317b312253280b80317b30a
0d32c04116031600d00316000200700316000102c4000f0101001f00a003
1500b0031500020306000f0101001f00400312b32426329fbf0304000103
0203010064001fffc00301b20d1132410a02ff02ef0012001f02ee02ed00
64001fffc002edb30e11329f414a02e200af02e200bf02e2000302e202e2
02e102e1007f02e00001000f02e0003f02e0009f02e000bf02e000cf02e0
00ef02e0000602e002e002df02df02de02de000f02dd002f02dd003f02dd
005f02dd009f02dd00bf02dd00ef02dd000702dd02dd001002dc00010000
02dc0001001002dc003f02dc000202dc02dc001002db000102db02db000f
02da000102da02daffc002d3b2373932b9ffc002d3b22b2f32b9ffc002d3
b21f2532b9ffc002d3b2171b32b9ffc002d3b2121632b802d2b2f9291fb8
02e3b3202b1fa0413002d400b002d40002000002d4001002d4002002d400
5002d4006002d4007002d40006006002d6007002d6008002d6009002d600
a002d600b002d60006000002d6001002d6002002ca002002cc002002d600
3002d6004002d6005002d6000802d0b2202b1fb802cfb226421f411602ce
02c70017001f02cd02c80017001f02cc02c60017001f02cb02c50017001f
02c902c5001e001f02ca02c6b21e1f00410b02c6000002c7001002c60010
02c7002f02c5000502c1b324121fff411102bf0001001f02bf002f02bf00
3f02bf004f02bf005f02bf008f02bf000602bf0222b2641f12410b02bb00
ca0800001f02b200e90800001f02a600a20800406a1f4026434932402043
493240263a3d3240203a3d329f209f26024026969932402096993240268e
923240208e92324026848c324020848c3240267a813240207a813240266c
763240206c76324026646a324020646a3240265a5f3240205a5f3240264f
543240204f5432b8029eb724271f374f6b0120410f027700300277004002
7700500277000402770277027700f90400001f029bb22a2a1fb8029a402b
292a1f80ba0180bc0180520180a201806501807e01808101803c01805e01
802b01801c01801e0180400180bb0138000100800140b40180400180bb01
3800010080013940180180ca0180ad018073018026018025018024018020
013740b80221b2493340b80221b2453340b80221b341423240b80221b33d
3e320f410f0221003f0221007f0221000300bf022100cf022100ff022100
0300400221b320223240b80221b3191e3240b80222b32a3f3240b80221b3
2e3a326f414802c3007f02c3008f02c300df02c30004002f02c3006002c3
00cf02c30003000f02c3003f02c3005f02c300c002c300ef02c300ff02c3
000600df02220001008f02220001000f0222002f0222003f0222005f0222
007f022200ef0222000600bf022100ef02210002006f0221007f022100af
02210003002f0221003f0221004f0221000302c302c30222022202210221
401d101c102b1048038f1c010f1e014f1eff1e0237001616000000121108
11b8010db6f70df8f70d00094109028e028f001d001f0290028f001d001f
028fb2f91d1fb80198b226bb1f41150197001e0401001f01390026012500
1f013800730401001f0135001c0801001f0134001c02ab001f0132b21c56
1fb8010fb2262c1fba010e001e0401b61ff91ce41fe91cb80201b61fe81c
bb1fd720b80401b21fd51cb802abb61fd41c891fc92fb80801b21fbc26b8
0101b21fba20b80201b61fb91c381fadcab80401b21f8126b8019ab21f7e
26b8019ab61f7d1c471f6b1cb80401b21f6526b8019ab21f5e73b8040140
0f1f52265a1f481c891f441c621f4073b80801b61f3f1c5e1f3c26b8019a
b21f351cb80401b61f301cbb1f2b1cb80401b61f2a1c561f291cb80101b2
1f231eb80401b21f5537b80168402c07960758074f07360732072c072107
1f071d071b071408120810080e080c080a080808060804080208000814b8
ffe0402b0000010014061000000100060400000100041000000100100200
0001000200000001000002010802004a00b013034b024b5342014bb0c063
004b6220b0f65323b8010a515ab005234201b0124b004b5442b0382b4bb8
07ff52b0372b4bb007505b58b101018e59b0382bb00288b801005458b801
ffb101018e851bb0124358b900010111858d1bb900010128858d59590018
16763f183f123e113946443e113946443e113946443e113946443e113946
60443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b
2b182b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb09353205c58b9
01f201f04544b901f101f045445958b9033e01f2455258b901f2033e4459
594bb8015653205c58b9002001f14544b9002601f145445958b9081e0020
455258b90020081e4459594bb8019a53205c58b9002501f24544b9002401
f245445958b909090025455258b9002509094459594bb8040153205c58b1
73244544b1242445445958b917200073455258b9007317204459594bb804
0153205c58b1ca254544b1252545445958b9168000ca455258b900ca1680
4459594bb03e53205c58b11c1c4544b11e1c45445958b9011a001c455258
b9001c011a4459594bb05653205c58b11c1c4544b12f1c45445958b90189
001c455258b9001c01894459594bb8030153205c58b11c1c4544b11c1c45
445958b90de0001c455258b9001c0de04459592b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
65422b2b01b33b59635c456523456023456560234560b08b766818b08062
2020b163594565234520b003266062636820b003266165b059236544b063
234420b13b5c4565234520b003266062636820b003266165b05c236544b0
3b2344b1005c455458b15c406544b23b403b4523614459b3475034374565
23456023456560234560b089766818b080622020b134504565234520b003
266062636820b003266165b050236544b034234420b147374565234520b0
03266062636820b003266165b037236544b0472344b10037455458b13740
6544b24740474523614459004b5342014b5058b108004259435c58b10800
4259b3020b0a124358601b2159421610703eb0124358b93b21187e1bba04
0001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba04000400
000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b2b
59b0102342b0112342002b74757375001845694445694445694473737373
74757374752b2b2b2b74752b2b2b2b2b7373737373737373737373737373
73737373737373737373732b2b2b45b0406144737400004bb02a534bb03f
515a58b1070745b040604459004bb03a534bb03f515a58b10b0b45b8ffc0
604459004bb02e534bb03a515a58b1030345b040604459004bb02e534bb0
3c515a58b1090945b8ffc06044592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b752b2b2b2b2b2b2b435c58b9008002bbb301401e017400735903b01e
4b5402b0124b545ab012435c5a58ba009f02220001007359002b7473012b
01732b2b2b2b2b2b2b2b737373732b002b2b2b2b2b2b0045694473456944
73456944737475456944734569444569444569447374456944456944732b
2b2b2b2b732b002b732b74752b2b2b2b2b2b2b2b2b2b2b2b2b2b73747500
000000>
[4909 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 108 1 <00010066ffe7057605d3001d00b8406063026a1d022000320d6300700074
1d8000841d90009a05ab03a50db903b40dc70dd000e41df31d110e121d11
1d1d032a0628112a1c201f470d56145715561968056b1d7b128b129a0399
0e9a1ca801a402a811d50e130014001a1014101a0402b8ffdeb2283901b8
ffc040272839100f0001041b131e0c031b1e040910260f4a002620010101
1a1f172620080108191e635c182b4e10f45d4ded4e10f65d4dedf4ed003f
ed3fed1117393130012b2b5d5d71005d0172011706042322240235341224
33320417072626232206021514121633323604b4c23dfec3e5edfed79baf
0143c2dc012c3bbf33c293a9e35c6de686a3e2020231effbc1016ed2e501
55b1e0cb2da092a2feef91bbfee98abc>IAAAAA+ArialMT AddT42Char 
1 394 2 <00020044ffe80427043e000d001900c1405d12070a190c47064808560659
08670669080834103a123a16351845104b124b1645185c055c0952105d12
5d1652186d056d0964106d126d1664187701150906050d5b035405540a5b
0c6c036505650a6c0c0a171c0407111c0b0b142407b8ffc0401324253430
0701000710072007030731df1b011bb8ffc040191e2334301b011b0e2400
402425341f003f000200311a3437182b10f65d2bed10712b5df65d5d2bed
003fed3fed313001715d0071435c584009530553096205620904015d5913
1037363332001514060623220013141633323635342623220644a489c5db
01167beb8bdffeedb9b28786b2b38587b2021301278e76fee1fdcdeb8201
1e010dcccbccd1c5cbca>IAAAAA+ArialMT AddT42Char 
1 674 3 <00010087000003e6043e001600cc40130503061302a810b810e303e713f0
03f6130604b8fff040310b0d347910019810d018e018ff18042008140e14
16121c05070106160d0a0d0e0c0e240b40333634ff0b01ff0b010b4e18b8
ffc0401a343634b018f018027018a018b018c01804180302331516250100
b8ffc04012333634f0000100002000d000e00004004e1710f65d712b3cfd
3cf43c105d712bf65d712bed3c103c003f3c3f3fed113901123931304379
40160611090a080a070a0306102611060e1b010f0a121b01002b012b2b2a
81015d71002b5d7133113315363332161617161511231134262623220615
1187a275dd60a150100ab42a6b4873a7042697af45704d327dfd7302866e
6d4192ccfdbc>IAAAAA+ArialMT AddT42Char 
1 950 4 <0001001a000003e80426000a015eb7350501002211390ab8ffde400d1139
0916121c340816121c3402b8ffeab3121c3401b8ffeab3121c340ab8ffd8
40091e213400281e21340ab8ffe8400922253400162225340ab8ffda40b5
282e340020282e340f0c29002809260a3900350a4800470a560156025908
5809660166026908690978007701770279087809770a8701870286038907
88088a099d009809910aac00a20abd00b707b10ac900c50ada00d50aec00
e30afb00f40a2c0a00050a1800160a2800260a370a4f00400a0905401216
3405400b0d340a07080825090a1409090a0003020225010014010100050a
0a000a09080802020106070a09030001052f0c010c220840404009800902
09b8011bb5400580050205b8011b400920024001220bead2182b10f6ed1a
19fd5dfd5d1a18ede45d11123939123939003f3c103c103c3f3c11398705
2e2b877dc4872e182b877dc43130002b2b01715d2b2b2b2b2b2b2b2b2b2b
2b2b005d210133131617363713330101aefe6cbee4251f182becb9fe6e04
26fd84676f54760288fbda00>IAAAAA+ArialMT AddT42Char 
1 1352 5 <00010088000003f805ba000b01cc401a070656065a09030f0df305f60603
5503770a0212062013213408b8fff0b312273409b8fff0b41227341205b8
fff0b312213409b8fff04084122734060404050406370947040525062d0a
580a7703750ada03e30607a60601230626072508390638093f0d4f0d5904
5906580759097d0479059909c606d204d606e406e907f706f90815120a0a
05030304020606070909080a0a050908082507061407070603040425050a
1405050a0a09060304080102000405060708080b0b000a04b8010fb20522
08b8010f402320073f0702071a900d010d0b2500022501019000013f004f
000200190c0de1214766182b2b4ef45d713c4d10ed10ed4e1071f65d4ded
f4ed003f3c103c103c3f3c3f3c11173987052e2b047d10c487052e182b0e
7d10c40710083c083c0310083c083c313001435c58400a092c1d3909081d
1d3c06b8ffdeb21d3906b8ffd4b2203906b8ffd4b121392b2b2b2b2b595d
00715d0171002b2b435c58b90006ffc0b2213903b8ffc0b2163903b8ffde
b2103906b8ffdeb2103903b8ffdeb20c3903b8ffdeb10b392b2b2b2b2b2b
59012b2b2b435c584012dd040108141639090814143c090814143c06b8ff
f6b2183906b8ffecb11b392b2b2b2b2b015d59005d015d71331133110133
01012301071188b401aae9fe6a01bfdefea17f05bafcbc01b0fe76fd6402
1f7afe5b>IAAAAA+ArialMT AddT42Char 
1 1866 6 <0002004bffe8041e043e0015001d00de40641f001c150255035d055d0955
0b65036b056f09650b081000100110022712d905fa14f61a0731123a1931
1c41124d1a411c51125c19521c61126d1a611c78067815f602f618100016
010f0d171750166016701603161c0f9010a010021010041b1c0a0700b802
aa40090195131c040b17400db8ffc04009272a34b00d010d1a1fb8ffc0b3
2526341fb8ffc0401d1e2334301f011f163310240740242a341f073f074f
070307191e3437182b4e10f45d2b4dfde44e10712b2bf6712b4ded003fed
fde43fed12392f5d3cfd713c011112393912393130015d005d0171720117
06062322001110003332001114072116163332360121262726232206035e
ba2ceeb9e9feef0114dcd5010e01fce80ab285638cfdda02510c3856897c
a9015617a3b4011f0103010c0128fedefef91020afba680195864368a600
>IAAAAA+ArialMT AddT42Char 
1 2196 7 <00010085000002c6043e00110083403b2f13011004012304340443045304
66047404060911080908090d1311090d000308010b1c06070106000a0928
900801082220130113022211250100b8ffc04015333634f0000100002000
d000e00004004e1247c4182b10f65d712b3cfde4105df472e4003f3f3fed
11393911393901111239390010c9870e7dc43130005d72015d3311331536
3633321707262322060706151185a23e693f5b5e3e42423b5e141e0426a1
71483aa727473f6072fdd400>IAAAAA+ArialMT AddT42Char 
1 2388 8 <000100830000013705ba0003008cb90005ffc0b337383405b8ffc0b33435
3405b8ffc0b330313405b8ffc0b322253405b8ffc040251517340f051f05
9f05df05044f05df05f005031f0570058005ff05040100000a0203250100
b8ffc0b337383400b8ffc0401a3335349f0001c000f0000200002000d000
e00004004e044750182b10f65d71722b2b3cfd3c003f3f3130015d71722b
2b2b2b2b3311331183b405bafa46>IAAAAA+ArialMT AddT42Char 
1 2552 9 <000200b9000001860426000300070038402004050006070902063c04033c
0106040a023c2f003f000220000100a108a198182b10f45d71ed003f3fed
10ed011112393912393931301335331503353315b9cdcdcd0359cdcdfca7
cdcd>IAAAAA+ArialMT AddT42Char 

1 0 10 <> IAAAAA+ArialMT AddT42Char 
1 2644 11 <00010056ffe6041605c0002b00d34028050d160d450d860d044511571176
1b0352166c106a146416750d7914860d8a14891ba50d0a052003b8ffe040
0b0b0c0d0e040701230d0c01b802a4b340000100bb01180029000d0135b4
0c0c150418ba02a4001902684024151e1c05041e290d12735f206f200220
8007732640212334302601002610260226902d18b80138b219d301ba0138
0000ffc0400b212334200040000200902cb80192b18b182b10f65d2bedf4
ed10f65d712bedf45ded003fed3fedfde41112392fed10fd5de411123901
111217393130013838015d005d0171133716163332363534262322073716
333236353426232206072736363332161615140607161615140023222656
b41f956b7fafa27d334c14120b73b8866a698c14b421eaae78ca6b666482
90fee8d6c1ff0183189987b0827ca1149e02787d6382848420b5c767b264
5f9c2e1ebd8ec0fef5e6>IAAAAA+ArialMT AddT42Char 
1 2984 12 <0001000f000003f1042600100177b70f12010f22193906b8ffde40b61939
5a0f96049608990e9a0fc005c006c007cb0f090f4016391a031309150d1a
1035013a0b81018e0b082f1257045907590b580e9701980a980bb702b80c
c80bca0ecc10da03d509d10ddb10e50a1212060603070809090106060905
0403030b0f0f100e0d0d010f0f0d100b010009020d0b030c100a060f020f
0a10c600c60902102500091400000903020dc60d010d250c03140c0c030a
090903030206100d0d0c0c000a4f120112490d7e0c220a0f6106097e400a
b8011bb74006500680060306b80243400e20037e02224f00010049117cc4
182b10f65df4ed1a19fd5dfd1a18ed10e510f4ede65d003f3c103c103c3f
3c103c103c87052e2b5d877dc4872e182b5d7d10c400111239390f0f8708
c4870e10c408c4870e10c4c408c4070e103c3c083c313001435c58b40e18
1d390bb8ffde400b1d390c221739032217390bb8ffdeb2213910b8ffc040
0a15390122213909401c392b2b2b2b2b2b2b2b595d71002b5d2b2b015d33
010133171617363737330101230327010f0184fe99e1a32e1c2c25b3d7fe
91018bddda3afee9022801fef947304233fbfe0cfdce014a59fe5d00>IAAAAA+ArialMT AddT42Char 
1 3432 13 <0002004dffe7041505c0001d002a00b240276b190144074015441944205a
1254206b03640764086a1264207408751c8508861cd608d4161107b8ffe0
b42720232021b8ffe04011281e400d500d020d0d141b01d35f000100b802
684009051e1b05221e140d01b80138401500b52573104021233430100100
1010100210902c0aba0138001e0139400a3f175f176f177f170417b80224
b32bc78b182b10f65deded10f65d712bedf4ed003fed3fedfd5de4111239
2f5ded31300138383838015d005d01072627262322070606073636333212
15140606232200111037363332160114161633323635342623220603fbb3
182c496b564155620241bc67b4fd77d084e1fee49d89e8adddfd374f8e4e
72a4a27b7aaa04530e6a304d303eeedc6360fef7d28aed7e014b017c01a9
c1a8c2fcdd5daa59b89e98afaf00>IAAAAA+ArialMT AddT42Char 
1 0 0 <00020100000005000500000300070042b40201e40607b802994013000504
e403000a0704e4010019080605e40203bc023100090199012e00182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
01000400fc2003c0fc400500fb002004c000>IAAAAA+ArialMT AddT42Char 
IAAAAA+ArialMT /CharStrings get begin
/g1 1 def
/g2 2 def
/g3 3 def
/g4 4 def
/g5 5 def
/g6 6 def
/g7 7 def
/g8 8 def
/g9 9 def
/g10 10 def
/g11 11 def
/g12 12 def
/g13 13 def
end
IAAAAA+ArialMT /Encoding get
dup 1 /g1 put
dup 2 /g2 put
dup 3 /g3 put
dup 4 /g4 put
dup 5 /g5 put
dup 6 /g6 put
dup 7 /g7 put
dup 8 /g8 put
dup 9 /g9 put
dup 10 /g10 put
dup 11 /g11 put
dup 12 /g12 put
dup 13 /g13 put
pop
end
%ADOEndSubsetFont
/XJIXJQ+ArialMT /IAAAAA+ArialMT findfont ct_VMDictPut
/XJIXJQ+ArialMT*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 242{/.notdef}rp]
XJIXJQ+ArialMT nf
XJIXJQ+ArialMT*1 [7.5808 0 0 -7.5808 0 0 ]msf
27.1586 13.8879 mo
(\001\002\003\004)
[5.49608 4.24525 4.21492 0 ]xsh
17.4683 22.9849 mo
(\005\006\007\003\006\010\011\012\013\014\013)
[3.79041 4.21492 2.53192 4.24525 4.21492 1.70569 2.07707 2.09984 4.21492 3.79041 0 ]xsh
%ADOBeginSubsetFont: JAAAAA+Arial-BoldMT Initial
ct_T42Dict begin
0 -0.012 0.625 0.699
 256 array 0 1 255 {1 index exch /.notdef put} for  /JAAAAA+Arial-BoldMT
Type42DictBegin
[<00010000000b000b000b000b63767420f292d024000000bc000007386670
676d75e7004b000007f400000547676c7966b1d6ff4d00004d7c00000668
686561648e56110e00000d3c000000366868656154fe820700000d740000
0024686d74783002ad1300000d98000000146c6f63610804d60200000dac
0000000c6d617870d210a90600000db8000000206e616d655919f0970000
0dd800002f377072657028990e9900003d100000106c6764697200000000
000000000000000005ba001c05ba001c05a7001c0426001c0000ffe40000
ffe40000ffe4fe69ffe405ba001cfe69ffe402ea0000011d0000011d0000
00000000000000b200ac00d70128012000b301fa001700f8011901310049
000400f7000300af00fd0095001400540096011200240016005500490104
0119012b008c019bff76ffe9003d009200a2ffb70182ffaa0016008f00c6
00f8001c00de04010037004e00550055006500e903e50059ff9a00080087
000b003b00520116006100d600d600f500000093009400be017cfff80004
001400820092003c00410041ffc1fffc002a008c049005d809b5009100bb
0106ff63ff69001e0022008a022bffd6ffdf0026005900a300ac0104012b
01c004480021006b00850098011903c6006b009500a400fe010c025d0343
05bf000000490056006e0077008a00aa00ca0112015005d805f0ff7bffe7
0006001300280061006900e90135014d02a5040cff3effda005b00b900c8
01190119011901c0045b04a7055bfe3fff9dffc2001500b7010a01bc01c1
0532058efd81ffa1ffae000c00260031003d004e00560062008300c100c9
00f100f2027fff7f00480053007700c5011d01200126012801d60219027e
027e03d3002e0041005d006b0075009f00b000b200ba00bb00bd00d600db
00e000e50114011b014a0162019101f2020c026402cf039b03b403d40401
04a9001600230025002a007400a500b600cc00cd00cf0105012001300150
016a016f0197019d01e002b002ec02f70408048304fb04fd0526fee0fefb
ff4efff50018001a004c007a007f009100a300b300b400ce00d500f200f3
00f601100138016801a101b001e001ec02090222024f0270029602a502ad
034e039103c104350442046b04cd04da0586058b076107fefca6fe93fead
fed1ffb7ffd10003000e00180026004600690081008f00a500bf00d300d5
00d900dd00e20119012b0138013b015a015e016801730188019401ad01c5
01d101ea01f20200020002000222023b0244024f026f0272027e02820293
029402a502cf02cf02d002da02dd02eb02f5030503220336037103a103b0
03b803d003e604100426042e0431044f045a04ff053205320547055305a8
05ab05c205f0063c0664067006e80782078408ccfd2afddefe00fe68feb0
feb3ffaa00080059007a0091009e00a200af00b400bb00ca00cc00ce00d9
00e000f40114011a01210127012b01390146014b014d0157015c01650182
018701920198019b01a201ae01c501c501d102070222022b024102530261
026502840287028d02b402b402ba02c902d602d802ed02f503170323032b
03310349035a035b036e03710374037e03840391039103aa03cf03d303e7
03e803ed04080417041e0475047a049904a704b404d1054c056d056d05a2
05bf05c005d105fc05fc0602061a061c062f066a06a806e2070607360750
078907d407f30870011c012a011a01200000000000000000000000000219
000b001e02aa0214047f01ed0000001d0104000f0091002b018801530112
01f3003f03fe0168010e047f01ed036e03150219041300000000064004b0
0000027401bb003501c5007f06020301000004e000b201dc02e004c3023d
00d50160011904a7036e05ca022100ab0426009002bc02bb014200b4023c
0256029c030001e501a800e5006b00780094016b017300ab01ed013a017d
0137017f00d4021603530184003cffa202040109014901f0006e03150081
0464005e0000000000000000000000000000000000000000000000000000
00000000013900dc00e9fe9e040d047c012b00b80096005900ac00df01a9
00fa0105ffec00170003005500610004008c00a3008500280120005d00d6
007f012601190104016c06cf00b4010600000737063e047a00f000f900e9
05ba042604420000ffe7fe69049e04e3ff37ff2d01200105012000a80074
0068004700f200e500d900bd00a800680047005c0048000a002800320041
0050005a0064007d00870091ffb0ff9cff83ff79ff6f00cb012000fa012c
01fa01a000d500b8005c003c00c800c8008f00d9018b00b3004700000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000fe6400c000ea01180125
013203b003ed0576059005aa05b405be05cd063100780084009b00cc00e2
00f4010a0120016300d100ea00f7010801420019002c0034004100380048
0058006c025903bd0043011a007000d30028003700420050005a00640073
00780082008c009c00a500bd00ce00f00110015c00be00d801020117012c
016300ea01080041004b0055005f007300a60109018301b300410064001e
002a00eb00fa010e01380274002c00400082009600b600c000cc00dc00e6
00f000ff010a0120012c013b01440156016300f700570064011001360050
01b10046ffb6007f004e004403cc00e5002401100042012201a400f00060
00e0000e001d003905e30102002cfe4eff38026903bd011600ff000e00a0
0054001b003d01710041000f005000fd0015014f0035fe52002c4040403f
3e3d3c3b3a3938373534333231302f2e2d2c2b2a29282726252423222120
1f1e1d1c1b1a191817161514131211100f0e0d0c0b0a0908070605040302
01002c4523466020b02660b004262348482d2c452346236120b02661b004
262348482d2c45234660b0206120b04660b004262348482d2c4523462361
b0206020b02661b02061b004262348482d2c45234660b0406120b06660b0
04262348482d2c4523462361b0406020b02661b04061b004262348482d2c
0110203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920
b0ed51582320b04d44235920b09051582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217453ab1
0200080d2d2c45b01a234445b01923442d2c2045b00325456164b0505158
45441b2121592d2cb00143632362b0002342b00f2b2d2c2045b000436044
2d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb81000
62602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4182d
2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b03
8a45186920b01723448a8a8720b0c05158b0112bb0172344b0177ae41b21
b0177ae45959182d2c2d2cb0022546608a46b040618c482d2c4b53205c58
b002855958b00185592d2c20b0032545b019234445b01a23444565234520
b00325606a20b009234223688a6a606120b01a8ab000527921b21a1a40b9
ffe0001a45208a54582321b03f1b235961441cb114008a5279b319402019
45208a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f4323
430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f43234365
0b2d2cb11011432343650b2d2c4b525845441b2121592d2c0120b0032523
49b04060b0206320b000525823b002253823b002256538008a63381b2121
21212159012d2c4bb06451584569b00943608a103a1b212121592d2c01b0
05251023208af500b0016023edec2d2c01b005251023208af500b0016123
edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001
610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a
2a2d2c352d2c76b8023623701020b802364520b0005058b00161593a2f18
2d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621b
b200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f
2b59b002602d2c0c6423648bb84000626023212d2cb4000100000015b008
26b00826b00826b008260f10161345683ab001162d2cb4000100000015b0
0826b00826b00826b008260f1016134568653ab001162d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2c4b5458381b2121592d2cb0134358031b02592d2c
b0134358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c58
0cb00425b00425060c6423646164b0035158b00425b00425012046b01060
482046b0106048590a21211b2121592d2cb012435c580cb00425b0042506
0c6423646164b807085158b00425b00425012046b8fff060482046b8fff0
6048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53
234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b2121
592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d
2c462346608a8a462320468a608a61b8ff8062232010238ab902a702a78a
70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d000001
00000002d1ec9683ebc75f0f3cf50819080000000000a2e33c1d00000000
000000000000ffe80500059d00010009000100000000000000010000073e
fe4e00430000000000000000000100000000000000000000000000000005
06000100031d00870473004902aa001f047300410000003600a8019e022e
0334000100000005003300020000000000020010002f00410000064d106c
000300020000005f047a000000030000000000fe00000000000300000001
000a00fe0000000300000002000801080000000300000003005801100000
0003000000040014016800000003000000050018017c0000000300000006
00180194000000030000000700c401ac0000000300000008002602700000
000300000009008a0296000000030000000a04c20320000000030000000b
006207e2000000030000000c00660844000000030000000d06b408aa0000
00030000000e005c0f5e0001000000000000007f0fba0001000000000001
0005103900010000000000020004103e0001000000000003002c10420001
000000000004000a106e0001000000000005000c10780001000000000006
000c10840001000000000007006210900001000000000008001310f20001
00000000000900451105000100000000000a0261114a000100000000000b
003113ab000100000000000c003313dc000100000000000d035a140f0001
00000000000e002e17690003000104030002000e17970003000104030004
001a17a50003000104050002000a17bf0003000104050004001617c90003
000104060002000617df0003000104060004001217e50003000104070002
000817f70003000104070004001417ff0003000104080002000c18130003
0001040800040018181f000300010409000000fe18370003000104090001
000a193500030001040900020008193f0003000104090003005819470003
0001040900040014199f0003000104090005001819b30003000104090006
001819cb000300010409000700c419e3000300010409000800261aa70003
000104090009008a1acd000300010409000a04c21b57000300010409000b
00622019000300010409000c0066207b000300010409000d06b420e10003
00010409000e005c279500030001040a0002000e27f100030001040a0004
001a27ff00030001040b00020012281900030001040b0004001e282b0003
0001040c00020008284900030001040c00040014285100030001040e0002
0010286500030001040e0004001c28750003000104100002001228910003
000104100004001e28a30003000104130002000628c10003000104130004
001228c70003000104140002000e28d90003000104140004001a28e70003
000104150002001429010003000104150004002029150003000104160002
000e29350003000104160004001a294300030001041900020014295d0003
0001041900040020297100030001041b0002000a299100030001041b0004
0016299b00030001041d0002000629b100030001041d0004001229b70003
0001041f0002000a29c900030001041f0004001629d30003000104240002
000c29e90003000104240004001829f500030001042a000200082a0d0003
0001042a000400142a1500030001042d000200002a2900030001042d0004
00002a2900030001080a0002000e2a2900030001080a0004001a2a370003
000108160002000e2a510003000108160004001a2a5f000300010c0a0002
000e2a79000300010c0a0004001a2a87000300010c0c000200082aa10003
00010c0c000400142aa900540079007000650066006100630065002000a9
00200054006800650020004d006f006e006f007400790070006500200043
006f00720070006f0072006100740069006f006e00200070006c0063002e
00200044006100740061002000a900200054006800650020004d006f006e
006f007400790070006500200043006f00720070006f0072006100740069
006f006e00200070006c0063002f005400790070006500200053006f006c
007500740069006f006e007300200049006e0063002e0020003100390039
0030002d0031003900390032002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064004100720069
0061006c0042006f006c0064004d006f006e006f0074007900700065003a
0041007200690061006c00200042006f006c0064003a0056006500720073
0069006f006e00200032002e0038003200200028004d006900630072006f
0073006f0066007400290041007200690061006c00200042006f006c0064
00560065007200730069006f006e00200032002e00380032004100720069
0061006c002d0042006f006c0064004d00540041007200690061006c00ae
002000540072006100640065006d00610072006b0020006f006600200054
006800650020004d006f006e006f007400790070006500200043006f0072
0070006f0072006100740069006f006e00200070006c0063002000720065
0067006900730074006500720065006400200069006e0020007400680065
00200055005300200050006100740020002600200054004d0020004f0066
0066002e00200061006e006400200065006c007300650077006800650072
0065002e004d006f006e006f00740079007000650020005400790070006f
006700720061007000680079004d006f006e006f00740079007000650020
0054007900700065002000440072006100770069006e00670020004f0066
00660069006300650020002d00200052006f00620069006e0020004e0069
00630068006f006c00610073002c00200050006100740072006900630069
00610020005300610075006e006400650072007300200031003900380032
0043006f006e00740065006d0070006f0072006100720079002000730061
006e0073002000730065007200690066002000640065007300690067006e
002c00200041007200690061006c00200063006f006e007400610069006e
00730020006d006f00720065002000680075006d0061006e006900730074
002000630068006100720061006300740065007200690073007400690063
00730020007400680061006e0020006d0061006e00790020006f00660020
0069007400730020007000720065006400650063006500730073006f0072
007300200061006e00640020006100730020007300750063006800200069
00730020006d006f0072006500200069006e002000740075006e00650020
007700690074006800200074006800650020006d006f006f00640020006f
006600200074006800650020006c00610073007400200064006500630061
0064006500730020006f006600200074006800650020007400770065006e
00740069006500740068002000630065006e0074007500720079002e0020
00200054006800650020006f0076006500720061006c006c002000740072
006500610074006d0065006e00740020006f006600200063007500720076
0065007300200069007300200073006f006600740065007200200061006e
0064002000660075006c006c006500720020007400680061006e00200069
006e0020006d006f0073007400200069006e006400750073007400720069
0061006c0020007300740079006c0065002000730061006e007300200073
0065007200690066002000660061006300650073002e0020002000540065
0072006d0069006e0061006c0020007300740072006f006b006500730020
00610072006500200063007500740020006f006e00200074006800650020
0064006900610067006f006e0061006c0020007700680069006300680020
00680065006c0070007300200074006f0020006700690076006500200074
0068006500200066006100630065002000610020006c0065007300730020
006d0065006300680061006e006900630061006c00200061007000700065
006100720061006e00630065002e002000200041007200690061006c0020
0069007300200061006e002000650078007400720065006d0065006c0079
00200076006500720073006100740069006c0065002000660061006d0069
006c00790020006f00660020007400790070006500660061006300650073
002000770068006900630068002000630061006e00200062006500200075
0073006500640020007700690074006800200065007100750061006c0020
007300750063006300650073007300200066006f00720020007400650078
0074002000730065007400740069006e006700200069006e002000720065
0070006f007200740073002c002000700072006500730065006e00740061
00740069006f006e0073002c0020006d006100670061007a0069006e0065
00730020006500740063002c00200061006e006400200066006f00720020
0064006900730070006c00610079002000750073006500200069006e0020
006e006500770073007000610070006500720073002c0020006100640076
006500720074006900730069006e006700200061006e0064002000700072
006f006d006f00740069006f006e0073002e0068007400740070003a002f
002f007700770077002e006d006f006e006f0074007900700065002e0063
006f006d002f00680074006d006c002f006d0074006e0061006d0065002f
006d0073005f0061007200690061006c002e00680074006d006c00680074
00740070003a002f002f007700770077002e006d006f006e006f00740079
00700065002e0063006f006d002f00680074006d006c002f006d0074006e
0061006d0065002f006d0073005f00770065006c0063006f006d0065002e
00680074006d006c004e004f00540049004600490043004100540049004f
004e0020004f00460020004c004900430045004e00530045002000410047
005200450045004d0045004e0054000d000a000d000a0054006800690073
002000740079007000650066006100630065002000690073002000740068
0065002000700072006f007000650072007400790020006f00660020004d
006f006e006f00740079007000650020005400790070006f006700720061
00700068007900200061006e006400200069007400730020007500730065
00200062007900200079006f007500200069007300200063006f00760065
00720065006400200075006e006400650072002000740068006500200074
00650072006d00730020006f0066002000610020006c006900630065006e
00730065002000610067007200650065006d0065006e0074002e00200059
006f0075002000680061007600650020006f0062007400610069006e0065
006400200074006800690073002000740079007000650066006100630065
00200073006f006600740077006100720065002000650069007400680065
00720020006400690072006500630074006c0079002000660072006f006d
0020004d006f006e006f00740079007000650020006f007200200074006f
0067006500740068006500720020007700690074006800200073006f0066
007400770061007200650020006400690073007400720069006200750074
006500640020006200790020006f006e00650020006f00660020004d006f
006e006f0074007900700065002700730020006c006900630065006e0073
006500650073002e000d000a000d000a005400680069007300200073006f
00660074007700610072006500200069007300200061002000760061006c
007500610062006c00650020006100730073006500740020006f00660020
004d006f006e006f0074007900700065002e00200055006e006c00650073
007300200079006f00750020006800610076006500200065006e00740065
00720065006400200069006e0074006f0020006100200073007000650063
00690066006900630020006c006900630065006e00730065002000610067
007200650065006d0065006e00740020006700720061006e00740069006e
006700200079006f00750020006100640064006900740069006f006e0061
006c0020007200690067006800740073002c00200079006f007500720020
0075007300650020006f00660020007400680069007300200073006f0066
007400770061007200650020006900730020006c0069006d006900740065
006400200074006f00200079006f0075007200200077006f0072006b0073
0074006100740069006f006e00200066006f007200200079006f00750072
0020006f0077006e0020007000750062006c0069007300680069006e0067
0020007500730065002e00200059006f00750020006d006100790020006e
006f007400200063006f007000790020006f007200200064006900730074
0072006900620075007400650020007400680069007300200073006f0066
00740077006100720065002e000d000a000d000a0049006600200079006f
00750020006800610076006500200061006e007900200071007500650073
00740069006f006e00200063006f006e006300650072006e0069006e0067
00200079006f00750072002000720069006700680074007300200079006f
0075002000730068006f0075006c00640020007200650076006900650077
00200074006800650020006c006900630065006e00730065002000610067
007200650065006d0065006e007400200079006f00750020007200650063
006500690076006500640020007700690074006800200074006800650020
0073006f0066007400770061007200650020006f007200200063006f006e
00740061006300740020004d006f006e006f007400790070006500200066
006f00720020006100200063006f007000790020006f0066002000740068
00650020006c006900630065006e00730065002000610067007200650065
006d0065006e0074002e000d000a000d000a004d006f006e006f00740079
00700065002000630061006e00200062006500200063006f006e00740061
0063007400650064002000610074003a000d000a000d000a005500530041
0020002d0020002800380034003700290020003700310038002d00300034
00300030000900090055004b0020002d0020003000310031003400340020
003000310037003300370020003700360035003900350039000d000a0068
007400740070003a002f002f007700770077002e006d006f006e006f0074
007900700065002e0063006f006d0068007400740070003a002f002f0077
00770077002e006d006f006e006f0074007900700065002e0063006f006d
002f00680074006d006c002f0074007900700065002f006c006900630065
006e00730065002e00680074006d006c547970656661636520a920546865
204d6f6e6f7479706520436f72706f726174696f6e20706c632e20446174
6120a920546865204d6f6e6f7479706520436f72706f726174696f6e2070
6c632f5479706520536f6c7574696f6e7320496e632e20313939302d3139
39322e20416c6c20526967687473205265736572766564417269616c426f
6c644d6f6e6f747970653a417269616c20426f6c643a56657273696f6e20
322e383220284d6963726f736f667429417269616c20426f6c6456657273
696f6e20322e3832417269616c2d426f6c644d54417269616ca820547261
64656d61726b206f6620546865204d6f6e6f7479706520436f72706f7261
74696f6e20706c63207265676973746572656420696e2074686520555320
506174202620544d204f66662e20616e6420656c736577686572652e4d6f
6e6f74797065205479706f6772617068794d6f6e6f747970652054797065
2044726177696e67204f6666696365202d20526f62696e204e6963686f6c
61732c205061747269636961205361756e646572732031393832436f6e74
656d706f726172792073616e732073657269662064657369676e2c204172
69616c20636f6e7461696e73206d6f72652068756d616e69737420636861
726163746572697374696373207468616e206d616e79206f662069747320
7072656465636573736f727320616e642061732073756368206973206d6f
726520696e2074756e65207769746820746865206d6f6f64206f66207468
65206c6173742064656361646573206f6620746865207477656e74696574
682063656e747572792e2020546865206f766572616c6c2074726561746d
656e74206f662063757276657320697320736f6674657220616e64206675
6c6c6572207468616e20696e206d6f737420696e647573747269616c2073
74796c652073616e732073657269662066616365732e20205465726d696e
616c207374726f6b65732061726520637574206f6e207468652064696167
6f6e616c2077686963682068656c707320746f2067697665207468652066
6163652061206c657373206d656368616e6963616c20617070656172616e
63652e2020417269616c20697320616e2065787472656d656c7920766572
736174696c652066616d696c79206f662074797065666163657320776869
63682063616e2062652075736564207769746820657175616c2073756363
65737320666f7220746578742073657474696e6720696e207265706f7274
732c2070726573656e746174696f6e732c206d6167617a696e6573206574
632c20616e6420666f7220646973706c61792075736520696e206e657773
7061706572732c206164766572746973696e6720616e642070726f6d6f74
696f6e732e687474703a2f2f7777772e6d6f6e6f747970652e636f6d2f68
746d6c2f6d746e616d652f6d735f617269616c2e68746d6c687474703a2f
2f7777772e6d6f6e6f747970652e636f6d2f68746d6c2f6d746e616d652f
6d735f77656c636f6d652e68746d6c4e4f54494649434154494f4e204f46
204c4943454e53452041475245454d454e540d0a0d0a5468697320747970
6566616365206973207468652070726f7065727479206f66204d6f6e6f74
797065205479706f67726170687920616e64206974732075736520627920
796f7520697320636f766572656420756e64657220746865207465726d73
206f662061206c6963656e73652061677265656d656e742e20596f752068
617665206f627461696e6564207468697320747970656661636520736f66
747761726520656974686572206469726563746c792066726f6d204d6f6e
6f74797065206f7220746f676574686572207769746820736f6674776172
65206469737472696275746564206279206f6e65206f66204d6f6e6f7479
70652773206c6963656e736565732e0d0a0d0a5468697320736f66747761
726520697320612076616c7561626c65206173736574206f66204d6f6e6f
747970652e20556e6c65737320796f75206861766520656e746572656420
696e746f2061207370656369666963206c6963656e73652061677265656d
656e74206772616e74696e6720796f75206164646974696f6e616c207269
676874732c20796f757220757365206f66207468697320736f6674776172
65206973206c696d6974656420746f20796f757220776f726b7374617469
6f6e20666f7220796f7572206f776e207075626c697368696e6720757365
2e20596f75206d6179206e6f7420636f7079206f72206469737472696275
7465207468697320736f6674776172652e0d0a0d0a496620796f75206861
766520616e79207175657374696f6e20636f6e6365726e696e6720796f75
722072696768747320796f752073686f756c642072657669657720746865
206c6963656e73652061677265656d656e7420796f752072656365697665
6420776974682074686520736f667477617265206f7220636f6e74616374
204d6f6e6f7479706520666f72206120636f7079206f6620746865206c69
63656e73652061677265656d656e742e0d0a0d0a4d6f6e6f747970652063
616e20626520636f6e7461637465642061743a0d0a0d0a555341202d2028
38343729203731382d303430300909554b202d2030313134342030313733
37203736353935390d0a687474703a2f2f7777772e6d6f6e6f747970652e
636f6d687474703a2f2f7777772e6d6f6e6f747970652e636f6d2f68746d
6c2f747970652f6c6963656e73652e68746d6c004e006500670072006500
7400610041007200690061006c0020004e00650067007200650074006100
740075010d006e00e90041007200690061006c002000740075010d006e00
e90066006500640041007200690061006c00200066006500640046006500
7400740041007200690061006c00200046006500740074038803bd03c403
bf03bd03b10041007200690061006c0020038803bd03c403bf03bd03b100
540079007000650066006100630065002000a90020005400680065002000
4d006f006e006f007400790070006500200043006f00720070006f007200
6100740069006f006e00200070006c0063002e0020004400610074006100
2000a900200054006800650020004d006f006e006f007400790070006500
200043006f00720070006f0072006100740069006f006e00200070006c00
63002f005400790070006500200053006f006c007500740069006f006e00
7300200049006e0063002e00200031003900390030002d00310039003900
32002e00200041006c006c00200052006900670068007400730020005200
650073006500720076006500640041007200690061006c0042006f006c00
64004d006f006e006f0074007900700065003a0041007200690061006c00
200042006f006c0064003a00560065007200730069006f006e0020003200
2e0038003200200028004d006900630072006f0073006f00660074002900
41007200690061006c00200042006f006c00640056006500720073006900
6f006e00200032002e003800320041007200690061006c002d0042006f00
6c0064004d00540041007200690061006c00ae0020005400720061006400
65006d00610072006b0020006f006600200054006800650020004d006f00
6e006f007400790070006500200043006f00720070006f00720061007400
69006f006e00200070006c00630020007200650067006900730074006500
720065006400200069006e00200074006800650020005500530020005000
6100740020002600200054004d0020004f00660066002e00200061006e00
6400200065006c0073006500770068006500720065002e004d006f006e00
6f00740079007000650020005400790070006f0067007200610070006800
79004d006f006e006f007400790070006500200054007900700065002000
440072006100770069006e00670020004f00660066006900630065002000
2d00200052006f00620069006e0020004e006900630068006f006c006100
73002c002000500061007400720069006300690061002000530061007500
6e0064006500720073002000310039003800320043006f006e0074006500
6d0070006f0072006100720079002000730061006e007300200073006500
7200690066002000640065007300690067006e002c002000410072006900
61006c00200063006f006e007400610069006e00730020006d006f007200
65002000680075006d0061006e0069007300740020006300680061007200
610063007400650072006900730074006900630073002000740068006100
6e0020006d0061006e00790020006f006600200069007400730020007000
720065006400650063006500730073006f0072007300200061006e006400
2000610073002000730075006300680020006900730020006d006f007200
6500200069006e002000740075006e006500200077006900740068002000
74006800650020006d006f006f00640020006f0066002000740068006500
20006c006100730074002000640065006300610064006500730020006f00
6600200074006800650020007400770065006e0074006900650074006800
2000630065006e0074007500720079002e00200020005400680065002000
6f0076006500720061006c006c002000740072006500610074006d006500
6e00740020006f0066002000630075007200760065007300200069007300
200073006f006600740065007200200061006e0064002000660075006c00
6c006500720020007400680061006e00200069006e0020006d006f007300
7400200069006e0064007500730074007200690061006c00200073007400
79006c0065002000730061006e0073002000730065007200690066002000
660061006300650073002e00200020005400650072006d0069006e006100
6c0020007300740072006f006b0065007300200061007200650020006300
7500740020006f006e002000740068006500200064006900610067006f00
6e0061006c002000770068006900630068002000680065006c0070007300
200074006f00200067006900760065002000740068006500200066006100
630065002000610020006c0065007300730020006d006500630068006100
6e006900630061006c00200061007000700065006100720061006e006300
65002e002000200041007200690061006c00200069007300200061006e00
2000650078007400720065006d0065006c00790020007600650072007300
6100740069006c0065002000660061006d0069006c00790020006f006600
200074007900700065006600610063006500730020007700680069006300
68002000630061006e002000620065002000750073006500640020007700
690074006800200065007100750061006c00200073007500630063006500
73007300200066006f007200200074006500780074002000730065007400
740069006e006700200069006e0020007200650070006f00720074007300
2c002000700072006500730065006e0074006100740069006f006e007300
2c0020006d006100670061007a0069006e00650073002000650074006300
2c00200061006e006400200066006f007200200064006900730070006c00
610079002000750073006500200069006e0020006e006500770073007000
610070006500720073002c00200061006400760065007200740069007300
69006e006700200061006e0064002000700072006f006d006f0074006900
6f006e0073002e0068007400740070003a002f002f007700770077002e00
6d006f006e006f0074007900700065002e0063006f006d002f0068007400
6d006c002f006d0074006e0061006d0065002f006d0073005f0061007200
690061006c002e00680074006d006c0068007400740070003a002f002f00
7700770077002e006d006f006e006f0074007900700065002e0063006f00
6d002f00680074006d006c002f006d0074006e0061006d0065002f006d00
73005f00770065006c0063006f006d0065002e00680074006d006c004e00
4f00540049004600490043004100540049004f004e0020004f0046002000
4c004900430045004e00530045002000410047005200450045004d004500
4e0054000d000a000d000a00540068006900730020007400790070006500
660061006300650020006900730020007400680065002000700072006f00
7000650072007400790020006f00660020004d006f006e006f0074007900
7000650020005400790070006f0067007200610070006800790020006100
6e0064002000690074007300200075007300650020006200790020007900
6f007500200069007300200063006f007600650072006500640020007500
6e00640065007200200074006800650020007400650072006d0073002000
6f0066002000610020006c006900630065006e0073006500200061006700
7200650065006d0065006e0074002e00200059006f007500200068006100
7600650020006f0062007400610069006e00650064002000740068006900
7300200074007900700065006600610063006500200073006f0066007400
770061007200650020006500690074006800650072002000640069007200
6500630074006c0079002000660072006f006d0020004d006f006e006f00
740079007000650020006f007200200074006f0067006500740068006500
720020007700690074006800200073006f00660074007700610072006500
200064006900730074007200690062007500740065006400200062007900
20006f006e00650020006f00660020004d006f006e006f00740079007000
65002700730020006c006900630065006e0073006500650073002e000d00
0a000d000a005400680069007300200073006f0066007400770061007200
6500200069007300200061002000760061006c007500610062006c006500
20006100730073006500740020006f00660020004d006f006e006f007400
7900700065002e00200055006e006c00650073007300200079006f007500
20006800610076006500200065006e007400650072006500640020006900
6e0074006f00200061002000730070006500630069006600690063002000
6c006900630065006e00730065002000610067007200650065006d006500
6e00740020006700720061006e00740069006e006700200079006f007500
20006100640064006900740069006f006e0061006c002000720069006700
6800740073002c00200079006f0075007200200075007300650020006f00
660020007400680069007300200073006f00660074007700610072006500
20006900730020006c0069006d006900740065006400200074006f002000
79006f0075007200200077006f0072006b00730074006100740069006f00
6e00200066006f007200200079006f007500720020006f0077006e002000
7000750062006c0069007300680069006e00670020007500730065002e00
200059006f00750020006d006100790020006e006f007400200063006f00
7000790020006f0072002000640069007300740072006900620075007400
650020007400680069007300200073006f00660074007700610072006500
2e000d000a000d000a0049006600200079006f0075002000680061007600
6500200061006e00790020007100750065007300740069006f006e002000
63006f006e006300650072006e0069006e006700200079006f0075007200
2000720069006700680074007300200079006f0075002000730068006f00
75006c006400200072006500760069006500770020007400680065002000
6c006900630065006e00730065002000610067007200650065006d006500
6e007400200079006f007500200072006500630065006900760065006400
200077006900740068002000740068006500200073006f00660074007700
61007200650020006f007200200063006f006e0074006100630074002000
4d006f006e006f007400790070006500200066006f007200200061002000
63006f007000790020006f006600200074006800650020006c0069006300
65006e00730065002000610067007200650065006d0065006e0074002e00
0d000a000d000a004d006f006e006f007400790070006500200063006100
6e00200062006500200063006f006e007400610063007400650064002000
610074003a000d000a000d000a0055005300410020002d00200028003800
34003700290020003700310038002d003000340030003000090009005500
4b0020002d00200030003100310034003400200030003100370033003700
20003700360035003900350039000d000a0068007400740070003a002f00
2f007700770077002e006d006f006e006f0074007900700065002e006300
6f006d0068007400740070003a002f002f007700770077002e006d006f00
6e006f0074007900700065002e0063006f006d002f00680074006d006c00
2f0074007900700065002f006c006900630065006e00730065002e006800
74006d006c004e0065006700720069007400610041007200690061006c00
20004e006500670072006900740061004c0069006800610076006f006900
7400750041007200690061006c0020004c0069006800610076006f006900
74007500470072006100730041007200690061006c002000470072006100
73004600e9006c006b00f6007600e900720041007200690061006c002000
4600e9006c006b00f6007600e90072004700720061007300730065007400
74006f0041007200690061006c0020004700720061007300730065007400
74006f0056006500740041007200690061006c0020005600650074004800
61006c00760066006500740041007200690061006c002000480061006c00
760066006500740050006f00670072007500620069006f006e0079004100
7200690061006c00200050006f00670072007500620069006f006e007900
4e00650067007200690074006f0041007200690061006c0020004e006500
67007200690074006f041f043e043b0443043604380440043d044b043900
41007200690061006c0020041f043e043b0443043604380440043d044b04
3900540075010d006e00e90041007200690061006c002000540075010d00
6e00e90046006500740041007200690061006c0020004600650074004b00
61006c0131006e0041007200690061006c0020004b0061006c0131006e00
4b007200650070006b006f0041007200690061006c0020004b0072006500
70006b006f011100e20323006d0041007200690061006c0020011100e203
23006d004e0065006700720069007400610041007200690061006c002000
4e006500670072006900740061004e00650067007200690074006f004100
7200690061006c0020004e00650067007200690074006f004e0065006700
720069007400610041007200690061006c0020004e006500670072006900
74006100470072006100730041007200690061006c002000470072006100
7300bd039a000f0101001fffc00398b310143240b80399b30f1332404110
039500500395000200b0034d00c0034d0002006f0391007f03910002ffc0
034bb22d3132b9ffc0034bb30a0e32104110038b0020038b0080038b0003
00a0038b00010020038b0040038b0002ffc0038bb313163240b80383b20f
1132b9ffc0037bb2303432b9ffc0037bb310183250411403780001036503
6e0023001f037e036e001e001f0363036e001d001f03620364000d001fff
c00340b30f1032804110033f0001033f03150029001f034103160032001f
0344031a001b001fffc00375b20e1132b9ffc00375b2282a32410a034303
180032001f030f030d0034001f03080307b2321f20bb0340000100400388
b3090b3240b80388b2101532bd038503070014001f03800307b2171f0fbd
030a002f030a0002ffc00354b3090d3290410c035400a003540002001f03
6e0001009f036e00010040036eb2090b32410a0345031c0016001f036b03
1d0015001f0346031eb2151fc0bb0393000100400392b3090d3240b8033e
b2083340b8033eb30d0e32c04109033e000100b0038e00c0038e0002ffc0
0390b326383200412603280030032800020020037f0030037f0002001003
8a0030038a0050038a006f038a007f038a009f038a000600000389003003
890002002f037a0070037700900377009f037a0004ffc00315b20f1032b9
ffc00315b2242832b903190318b2321f10bb031a0001ffc0031ab3090e32
40b80318b2121332b9ffc00318b30c0e323fbd0373004f03730002004003
74b31718326fbb032a00010040032cb3181b3240b80370b2090c32bd0317
03160032001fffc00316b20e1132bd031c031e0016001f031d031eb2151f
b0411f031e0001000f031f000102ca02d00015001f02d302d5000d001f02
cf02d0000d001f02cb02d0000d001f02cd02d0000d001f02ce02d0000d00
1fffc002d0b3090c3240b802d2b3090c32e0411c02e50001005f02dd009f
02e5000202bb02c30030001f02da02b80032001f02d902b9003f001f02d8
02b80064001f02b902b80033001f02bab221c81fb802b8b321c81f40b803
9bb20d1632b9ffc002c3b22b2f32b9ffc002c3b21f2532b9ffc002c3b217
1b32b9ffc002c3b2121632412502c202c1001c001f02d702c10024001f02
c102c00022001f02bf02c00018001f02c0027400c8001f02b50235003b00
1f02b40235003b001f02c402bc001e001f02b702b60038001f02b3b20ec8
1fb802b0b207c81fb802afb206c81fb802aeb200c81fb802afb2502f1fbc
02ae02ab001a001f02adb2261a1fb802a8b326241f0fbb0235000102a502
74b21d1f12410a02a1015801f4001f02a000d801f4001f001202a2b237c8
1fb80290b2bc201fb9029002904018374025402d40a6033025302d30a603
2025202d203720a6204110028e0005009f028b0001028b028b0037002002
89003002890040028900900289b20437b041fd027400c002740002008002
7400a0027400020060027400700274000200000274001002740002008002
7400f002740002003f0285004f028500020090027e0090027f0090028000
90028100040090027a0090027b0090027c0090027d000400900274009002
750090027700030070027e0070027f007002800070028100040070027a00
70027b0070027c0070027d00040070027400700275007002770003006002
7e0060027f006002800060028100040060027a0060027b0060027c006002
7d000400600274006002750060027700030050027e0050027f0050028000
50028100040050027a0050027b0050027c0050027d000400500274005002
750050027700030040027e0040027f004002800040028100040040027a00
40027b0040027c0040027d00040040027400400275004002770003003002
7e0030027f003002800030028100040030027a0030027b0030027c003002
7d000400300274003002750030027700030020027e0020027f0020028000
20028100040020027a0020027b0020027c0020027d000400200274002002
750020027700030010027e0010027f001002800010028100040010027a00
10027b0010027c0010027d0004001002740010027500100277000300e002
7e00e0027f00e0028000e00281000400e0027a00e0027b00e0027c00e002
7d000400e0027400e0027500e00277b103d041c5027e00d0027f00d00280
00d00281000400d0027a00d0027b00d0027c00d0027d000400d0027400d0
027500d0027700030030027400400274000200c0027e00c0027f00c00280
00c00281000400c0027a00c0027b00c0027c00c0027d000400c0027400c0
027500c00277000300b0027e00b0027f00b0028000b00281000400b0027a
00b0027b00b0027c00b0027d000400b0027400b0027500b00277000300a0
027e00a0027f00a0028000a00281000400a0027a00a0027b00a0027c00a0
027d000400a0027400a0027500a0027700030090027e0090027f00900280
0090028100040090027a0090027b0090027c0090027d0004009002740090
02750090027700030020027e0020027f002002800020028100040020027a
0020027b0020027c0020027d000400200274002002750020027700030281
01580801001f028001290801001f027f00ec0801001f027e00d80801001f
027d00b10801001f027c00a60801001f027b00820801001f027a00370801
001f027700260801001f027500200801001f0274001f0801b21f370f4116
0235004f0235005f0235006f0235009f023500af023500bf0235000700af
023500cf023500df023500ff02354022040f074f079f07af07bf0705af07
e007020f064f069f06af06bf0605af06e0060220411b020d0001005f0235
0001008f02350001007f023500ef02350002002f0235003f02350002003f
0234004f0234000202350235023402344011ed20ef2a01cf2a01bf2a01af
2a018f2a01410902470104001e001f022000370201001f0158400c263e1f
d8263e1f3726273e1fb8028eb6ec171fb226361fb801bcb226361fb80129
402b26361fec26361fb126361fa626361f8226361f3726361f3226361f2d
26361f2526361f1f26361f37262a1fb801584022263e1fd8263e1fbc263e
1f27263e1f21263e1f20263e1f3700161600000012110840b9020d01a6b3
c50d0009b801bcb227281fb801bbb227301fb801b8b2274f1fb801b7b227
621f410901b600270101001f01b5002002ab001f01afb21fe41fb801adb2
1fe41fb801acb21fbb1fb801a8b21f341fb8015db2272e1fb8015bb227cd
1f410d0155001f0401001f0154001f0401001f0153001f0201001f0152b2
1f561fb80151b21f291fb8012bb227261f410d012a00270125001f012901
5800e4001f0125001f0401001f0124b21fe41fb80123b21f3b1fb80122b2
1f391f410d010800270801001f0106002d0101001f0105001f0101001f01
03b31fbb1fefb901580401400b1fed1f931fec1fe41feb1fb80201b21fd9
20b80401b21fcf25b80156400a1fbc2d9e1fbb1f411fb2410a0158040100
1f00b101580401001f00b001580401b51fa625891f9bb901580125b61f99
1f2e1f8e2db80801b51f8d1f291f89b901580401b21f8220b802ab40131f
801f301f742de41f731f4a1f611f521f5d25b802abb21f5c1fbc0801001f
0059015802abb61f5025891f491fb80125b21f4725b80401400b1f461f79
1f401f271f3920bc02ab001f003801580401b21f372dbc0125001f003201
580125b61f2c1f341f2a25b80801b21f5537b80111402a07f00790075b07
42073b07230722071e071d071408120810080e080c080a08080806080408
0208000814b8ffe0402b0000010014061000000100060400000100041000
0001001002000001000200000001000002010802004a00b013034b024b53
42014bb0c063004b6220b0f65323b8010a515ab005234201b0124b004b54
42b0382b4bb807ff52b0372b4bb007505b58b101018e59b0382bb00288b8
01005458b801ffb101018e851bb0124358b10100858d1bb900010119858d
5959001816763f183f123e113946443e113946443e113946443e11394644
3e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b
2b2b2b2b182b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb0815320
5c58b9020f020d4544b9020e020d45445958b90470020f455258b9020f04
704459594bb0e453205c58b90020020e4544b90027020e45445958b90842
0020455258b9002008424459594bb8012553205c58b90026020f4544b900
21020f45445958b90a0d0026455258b900260a0d4459594bb8040153205c
58b1d8204544b1202045445958b9250000d8455258b900d825004459594b
b8040153205c58b9015800264544b1262645445958b923200158455258b9
015823204459594bb02953205c58b11f1f4544b12d1f45445958b9010d00
1f455258b9001f010d4459594bb02f53205c58b11f1f4544b1251f454459
58b90135001f455258b9001f01354459594bb8030153205c58b11f1f4544
b11f1f45445958b91428001f455258b9001f14284459592b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b
01b331757ec3456523456023456560234560b08b766818b080622020b17e
754565234520b003266062636820b003266165b075236544b07e234420b1
31c34565234520b003266062636820b003266165b0c3236544b0312344b1
00c3455458b1c3406544b23140314523614459b33f3c5841456523456023
456560234560b089766818b080622020b1583c4565234520b00326606263
6820b003266165b03c236544b058234420b13f414565234520b003266062
636820b003266165b041236544b03f2344b10041455458b141406544b23f
403f452361445945695342014b5058b108004259435c58b108004259b302
0b0a124358601b2159421610703eb0124358b93b21187e1bba040001a800
0b2b59b00c2342b00d2342b0124358b92d412d411bba04000400000b2b59
b00e2342b00f2342b0124358b9187e3b211bba01a80400000b2b59b01023
42b0112342002b2b2b2b2b2b2b2b00b01243584bb035514bb021535a58b1
262645b040614459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7373
73737345b040614418004569444569447373737473737374737473742b2b
2b2b2b2b2b2b2b2b2b2b0073737373737373737373737373737373737373
737373747474747474747474747474747474747474747474757575737475
7575752b7300004bb02a534bb036515a58b1070745b040604459004bb02e
534bb036515a58b1030345b0406044b1090945b8ffc06044592b45694401
74007373732b4569442b012b435c58400a0006000702a006a00702b9ffc0
0274b31a1d326fbd0277007f02770002ffc00277b22f3132b9ffc00277b3
22253240b80274b32f353240b80274b3282a3240b80274b21a2132b8ffc0
b3371a1d32b8ffc0b3251a1d32b8ffc040112d1a1d329025902d9037a025
a02da03706b8ffc0b6a61a1d321fa61fb8028eb22fa60300742b732b2b2b
2b2b2b2b2b742b737459002b2b435c58b9ffc002a1b21c1d32b9ffc002a0
b21c1d322b2b592b73012b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b012b2b2b2b2b2b2b73742b2b2b2b2b2b2b2b73732b2b2b2b2b2b73
2b732b2b2b742b2b2b73737373732b73732b2b2b73002b2b2b2b7374732b
732b2b2b2b752b2b2b2b2b2b2b2b752b2b2b2b2b732b2b2b2b7374752b2b
7373732b2b2b00>
[1641 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 108 1 <0001008700000337043e001000a84028970501090e01530566057505032f
12580e680e7012040a090f0c1f0c028f0cff0c023f0c4f0c020cb8027740
29070701000a0302060a28000910093009700904091a7f129f12025f127f
12af12d01204121000260103b80129400b02028001a001020119113fb901
1c00182b4e10f4713c4d10ed10fd3c4e105d71f65d194de400183f3c3f3c
3fed5d717239323130015d005d71004bb017534bb035515a58b10a323859
005d212111211536363332170726232206061101a0fee70105436b446059
57473d3b522f0426976b4435f52e41aafef1>JAAAAA+Arial-BoldMT AddT42Char 
1 336 2 <00020049ffe8042e043e00230032014e4068071a081c051d161a4a1b481c
4925db10df11093619461957266619672686269219931aa61ab91bc71ac8
1b0c06060d151606191627062915591977028602a606b506c6060cbf34d9
10021d243231112c0d24402b2e3424402228342440191d346f24fc240224
461db8ffc040300e0f343d1d01001d101db01df91d041d1d2c013300400e
0f340f001f0002005521401c113f21401b103f2140181a3421b80274b504
070c0d0a2cb8ffc0b31c113f2cb8ffc0b31b103f2cb8ffc0b3181a342cb8
02744040140b1e3126082909280d591f0c9f0c021f0c01ff0c010c400e16
340c1a4f340134600001008e300101013329215f1701df17014f175f176f
17031719336941182b4e10f45d71724dedf471ed5d4e105df62b5d71724d
edf4e4fd3c003fed2b2b2b3f3c3ffd2b2b2bf45d2be412392f5d712bed5d
2b2b2b111239030e103c3c3c313001715d005d7101273636333216161503
141617212627262706062322263534363637363735342623220601060607
06151416333237363736350165ff2bd2cfbcb84b031b25feea0b10070348
a45da4bd569b92c54c506f4b54015e36ea243758444c4533100b02e22e9a
945989b7feb88c854c1c3719084646b2885a8d4b1c25201c51453bfed212
3218273c3b56322637246500>JAAAAA+Arial-BoldMT AddT42Char 
1 828 3 <0001001fffe80291059d001900cd402920002001230a290f3a0e4a0e590f
07191500180316150017121314011712021401180309070a070c18b80101
400f0017a017b017036017a017c0170317b80104b2150114b80274b30015
0607b80274400e0c0b092f0a2f00002f015f010201b80104402818032617
1255153f149f14af1403601480149014d014f01405001410142014301404
14191a78a0182b4e10f45d71724bb037534bb03b515a58b90014ffc03859
3c4dfc3cfd3cf45d3c10f419e400183fed3f3cfd3c10f45d71e411123911
330f0f0f0f3130015d011523111416163332371706232226262726351123
3533352511027ac00b271c274a18627c4c7a390b098181011a0426e0fe54
822b1c1bda2a335145319501cfe0d3a4fe89>JAAAAA+Arial-BoldMT AddT42Char 
1 1116 4 <00020041ffe80427043e0014001c01a3b90010fff840460b3999099a0d96
10a805a70abb09bb0db81a0808140148024706460a4f1ea80db606b61ac7
0ac80cd60ad80cf807f70d0d1c0f1c15401b1d3415400e11340f15bf15cf
150315b8ffc0b30f1e3f15b8ffc0b30e173f15b8028d400c0f0e12500e60
0e020e181201b8ffc0b6191b3401331200b8ffc0b31d203400b8ffc0b322
293400b8ffc0b32b2d3400b8ffc0b3181c3400b8ffc0400f0e0f34a00001
0000100002005f1212b80274b3040b1218b8027440240b070021012f1521
4f0e010e1a2f1e5f1e6f1e9f1e041e0f2108400d0f3408191d6941182b4e
10f42b4ded4e105df65d4dedf4ed003fed435c584014184028143f18401e
0f3f18401b103f18401c113f2b2b2b2b593ffd435c58b90012ffc0b32814
3f12b8ffc0b31e0f3f12b8ffc0b31b103f12b8ffc0b21c113f2b2b2b2b59
f45d712b2b2b2b2b435c58b90000ffc0b2123900b8ffc0b2173900b8ffb0
b3090a3e00b8ffc0b241213f2b002b2b2b59e42b1112395d435c5840140e
400f1e3f0e401c113f0e401b103f0e400e173f002b2b2b2b592f3cfd2b2b
722b2b3c0111333130015d71005d2b010506062320272635100033320003
211616333236132626232207061702fa011836e9affeeb85690114d3ed01
1206fd40038261425a270378565c3c3c0101522f9aa1b591dd0108012bfe
c7febd7d8b48016c7a7f43437300>JAAAAA+Arial-BoldMT AddT42Char 
1 0 0 <00020100000005000500000300070042b40201fe0607b8023f4013000504
fe03000a0704fe010019080605fe0203bc0126000901b0011800182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
01000400fc2003c0fc400500fb002004c000>JAAAAA+Arial-BoldMT AddT42Char 
JAAAAA+Arial-BoldMT /CharStrings get begin
/g1 1 def
/g2 2 def
/g3 3 def
/g4 4 def
end
JAAAAA+Arial-BoldMT /Encoding get
dup 1 /g1 put
dup 2 /g2 put
dup 3 /g3 put
dup 4 /g4 put
pop
end
%ADOEndSubsetFont
/XJIXJR+Arial-BoldMT /JAAAAA+Arial-BoldMT findfont ct_VMDictPut
/XJIXJR+Arial-BoldMT*1 
[/.notdef /g1 /g2 /g3 /g4 251{/.notdef}rp]
XJIXJR+Arial-BoldMT nf
XJIXJR+Arial-BoldMT*1 [7.5808 0 0 -7.5808 0 0 ]msf
24.8514 32.0819 mo
(\001\002\003\004)
[2.99448 4.21492 2.53194 0 ]xsh
XJIXJQ+ArialMT*1 [7.5808 0 0 -7.5808 0 0 ]msf
38.8264 32.0819 mo
(\011\012\015)
[2.07709 2.09982 0 ]xsh
83.1938 6.58124 mo
125.913 6.58124 li
125.913 35.7856 li
83.1938 35.7856 li
83.1938 6.58124 li
cp
83.1938 6.58124 mo
83.1938 6.58124 li
cp
125.913 35.7856 mo
125.913 35.7856 li
cp
0 .74255 1 0 cmyk
ef
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: IAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XJIXJQ+ArialMT gcheck setglobal} if
1 3746 14 <000100df000002fb05c0000a0073402003400d11346b047f028f02990804
ac04010900060502030905010c0201ca0a00b8ffc0401221233430000120
0001001a0c05400d0f3405b8ffc0400e212334300501200540050205190b
ba013c018500182b4e10e45d712b2b10f65d712b3c4dfd3c003f3f173901
11393130015d005d2b212311060607353636373302fbb441d35497e22f74
047b3e7c1fae47ca5f00>XJIXJQ+ArialMT AddT42Char 
1 3906 15 <0001003c0000040705c0001e00e740363b053b06bb05bf06bb07c708c91c
07490c590c540e6b0c640e7a127a138912bc12e51ae51bf01a0cbf0bb713
021b101c101d101e1006befff00007ffe00008fff00009fff0401a1e0a10
080606ca1c1a141c1c1a081c1a030102081a1c030d1e10b802a4b34f1101
11b80118b50d1e1405001eb802bb400f01020c0a7317d300000140212334
01bb0281002000100138400c11b53f025f026f027f020402ba0224001f01
8fb18b182b10f65df4ed10f62b3c10f4ed003f3cfd3c3fedfd5de4111217
390111121739870e2e2b0e7d10c401111239313000383838380138383838
005d015d7225152126373636373636353426232206072736363332161514
0606070606070407fc37021725a39aefa8997b829c01b913f8d1d3f648a7
c2a25c1eadad413c63c07ec4e5666b939c8a13cfd9eaad58aabca4886131
>XJIXJQ+ArialMT AddT42Char 
XJIXJQ+ArialMT /CharStrings get begin
/g14 14 def
/g15 15 def
end
XJIXJQ+ArialMT /Encoding get
dup 14 /g14 put
dup 15 /g15 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XJIXJQ+ArialMT*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
240{/.notdef}rp]
XJIXJQ+ArialMT nf
XJIXJQ+ArialMT*1 [7.5808 0 0 -7.5808 0 0 ]msf
94.4341 13.8879 mo
(\001\002\003\004)
[5.49609 4.2149 4.24524 0 ]xsh
84.7439 22.9849 mo
(\005\006\007\003\006\010\011\012\013\014\013)
[3.79041 4.2149 2.53195 4.24524 4.2149 1.70569 2.07709 2.09982 4.21494 3.79041 0 ]xsh
XJIXJR+Arial-BoldMT*1 [7.5808 0 0 -7.5808 0 0 ]msf
90.0174 32.0819 mo
(\001\002\003\004)
[2.95657 4.2149 2.53195 0 ]xsh
XJIXJQ+ArialMT*1 [7.5808 0 0 -7.5808 0 0 ]msf
103.992 32.0819 mo
(\011\012\016\017)
[2.07709 2.09982 4.21494 0 ]xsh
147.668 6.58124 mo
190.386 6.58124 li
190.386 35.7856 li
147.668 35.7856 li
147.668 6.58124 li
cp
147.668 6.58124 mo
147.668 6.58124 li
cp
190.386 35.7856 mo
190.386 35.7856 li
cp
0 .74255 1 0 cmyk
ef
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: IAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XJIXJQ+ArialMT gcheck setglobal} if
1 4236 16 <00030053ffe7041905c000170023003000df4037351601291649164926e6
0ce930050930017d007d017c047408710b720c750d7a178b008a018c0486
08810b840c860d8d17cc11c6131222b8ffe0b21c201ab8ffe0b220202fb8
ffe0b22d2026b8ffe0401e29200c001e18000c1b1e2ea02e012e12211e06
05281e120d1e73bf090109b8026740102b730f40202334300f01000f100f
020fb80191b6321873b0030103b80267b2247315b8ffc0400e2123342015
401502159031c78b182b10f65d2bedf45ded10f45d712bedf45ded003fed
3fed12395d2fed393901111239393130013838383838383838015d727100
710126263534363332161514060716161514002322003534361314163332
3635342623220603141616333236353426232206016a706ce6bfc0ea6b6d
878dfef6d9d9fef69162866b6885896667883a49905381a8ad827fa7031b
29986aa0dadfa06697292cc488bcff000101c08fc101546884835f638784
fcff4d904fa68082aaa8>XJIXJQ+ArialMT AddT42Char 
XJIXJQ+ArialMT /CharStrings get begin
/g16 16 def
end
XJIXJQ+ArialMT /Encoding get
dup 16 /g16 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XJIXJQ+ArialMT*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 239{/.notdef}rp]
XJIXJQ+ArialMT nf
XJIXJQ+ArialMT*1 [7.5808 0 0 -7.5808 0 0 ]msf
158.908 13.8879 mo
(\001\002\003\004)
[5.49609 4.2149 4.24524 0 ]xsh
149.218 22.9849 mo
(\005\006\007\003\006\010\011\012\013\014\013)
[3.79041 4.2149 2.53195 4.24524 4.21494 1.70566 2.07709 2.09982 4.21494 3.79041 0 ]xsh
XJIXJR+Arial-BoldMT*1 [7.5808 0 0 -7.5808 0 0 ]msf
154.491 32.0819 mo
(\001\002\003\004)
[2.95657 4.2149 2.53195 0 ]xsh
XJIXJQ+ArialMT*1 [7.5808 0 0 -7.5808 0 0 ]msf
168.433 32.0819 mo
(\011\012\016\020)
[2.09982 2.09982 4.21494 0 ]xsh
213.987 6.58124 mo
256.706 6.58124 li
256.706 35.7856 li
213.987 35.7856 li
213.987 6.58124 li
cp
213.987 6.58124 mo
213.987 6.58124 li
cp
256.706 35.7856 mo
256.706 35.7856 li
cp
0 .74255 1 0 cmyk
ef
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: IAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XJIXJQ+ArialMT gcheck setglobal} if
1 4606 17 <0002001a0000041005ba000a000d00f4403612580c680c9a0ca90cc90c05
4c034c0d94040312010208000c060307050a0b0307000c0c0d0dca030414
030304030d00020c0d040703bb02bb0008000201a0400a000404000c0c00
ca0a04b80266b705050a401d1f340ab80137400d07402223340780213507
900f02b8ffc0400d0d14340002100220020302b50eb8018cb18b182b10ec
5d2b10f62b2bf42b3c10e610fd3c003f3f10f43cf63c1139390111123939
872e2b047d10c40f0f0f313001435c58b9000dffdeb212390db8ffd4400b
333903222d3903041d1d3c2b2b2b2b595d005d435c5840140c400b390c80
50390c4026390c221c390c402d392b2b2b2b2b5921112135013311331523
110311010296fd84029d93c6c6b4fe35015fa503b6fc4aa5fea102040295
fd6b>XJIXJQ+ArialMT AddT42Char 
XJIXJQ+ArialMT /CharStrings get begin
/g17 17 def
end
XJIXJQ+ArialMT /Encoding get
dup 17 /g17 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XJIXJQ+ArialMT*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 238{/.notdef}rp]
XJIXJQ+ArialMT nf
XJIXJQ+ArialMT*1 [7.5808 0 0 -7.5808 0 0 ]msf
225.26 13.8879 mo
(\001\002\003\004)
[5.49609 4.2149 4.21494 0 ]xsh
215.537 22.9849 mo
(\005\006\007\003\006\010\011\012\013\014\013)
[3.79041 4.24524 2.53192 4.21494 4.24524 1.68295 2.09982 2.07709 4.24524 3.79041 0 ]xsh
XJIXJR+Arial-BoldMT*1 [7.5808 0 0 -7.5808 0 0 ]msf
220.844 32.0819 mo
(\001\002\003\004)
[2.95657 4.2149 2.53195 0 ]xsh
XJIXJQ+ArialMT*1 [7.5808 0 0 -7.5808 0 0 ]msf
234.786 32.0819 mo
(\011\012\017\021)
[2.09982 2.07709 4.24524 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/XJIXJP+LiberationSans*1 uf
/XJIXJP+LiberationSans uf
/HAAAAA+LiberationSans uf
/XJIXJR+Arial-BoldMT*1 uf
/XJIXJR+Arial-BoldMT uf
/JAAAAA+Arial-BoldMT uf
/XJIXJQ+ArialMT*1 uf
/XJIXJQ+ArialMT uf
/IAAAAA+ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
